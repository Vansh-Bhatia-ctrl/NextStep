[
  {
    "domains": [
      {
        "name": "Web Development",
        "slug": "web-development",
        "description": "Fundamentals of building for the web: browsers, HTTP, HTML, CSS, and modern developer workflows.",
        "courseCount": 1,
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "courses": [
      {
        "title": "Web Development: From Zero to First Page",
        "slug": "web-dev-zero-to-first-page",
        "shortDescription": "A beginner-friendly course that takes you from zero knowledge to building and deploying a simple web page.",
        "longDescription": "This course introduces the fundamentals of the web: how browsers and servers communicate (HTTP/HTTPS), how to structure content with HTML, style with CSS, basic developer tooling, and a simple first deployment workflow. Each lesson combines explanation, examples, exercises, and short quizzes to reinforce learning.",
        "tags": ["web", "html", "css", "http", "beginner", "frontend"],
        "thumbnail": "https://example.com/thumbnails/web-dev-beginner.jpg",

        "levelSummary": [
          {
            "level": "Beginner",
            "overview": "Learn core web foundations and ship your first static web page.",
            "moduleCount": 1
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "modules": [
      {
        "title": "Module 1 — Basics of the Web",
        "slug": "basics-of-the-web",
        "description": "Core fundamentals: what the web is, how browsers & servers communicate, and the building blocks (HTML & CSS).",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "lessons": [
      {
        "title": "What is the Web?",
        "slug": "what-is-the-web",
        "description": "High-level overview: websites, web apps, clients and servers.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "HTTP & HTTPS — How the Web Talks",
        "slug": "http-https",
        "description": "Requests, responses, status codes, headers, and secure transport (TLS).",

        "order": 2,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Browsers & DevTools",
        "slug": "browsers-devtools",
        "description": "How browsers render pages, the DOM, and an intro to DevTools for debugging.",

        "order": 3,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "HTML Basics",
        "slug": "html-basics",
        "description": "Structure content with HTML: elements, attributes, semantic tags, and basic forms.",

        "order": 4,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "CSS Basics",
        "slug": "css-basics",
        "description": "Style content: selectors, box model, layout basics (display, position), and responsive tips.",

        "order": 5,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Developer Workflow & First Deployment",
        "slug": "developer-workflow-deploy",
        "description": "Intro to editors, Git basics, and deploying a static page (GitHub Pages / Vercel).",

        "order": 6,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "learningContents": [
      {
        "explanation": "The web is a network of servers and clients. Servers host resources (HTML, CSS, JS, images) and clients (browsers) request them over protocols such as HTTP/HTTPS. Websites are collections of linked pages; web applications are interactive programs running in the browser, often communicating with servers via APIs.",
        "examples": [
          "A static blog where each page is HTML files served from a server.",
          "A web app like Google Docs that talks to a backend to save documents."
        ],
        "realWorldApplication": "Understanding this distinction helps you design whether a feature is client-only (UI) or requires backend services (data, auth).",
        "expertInsights": "Start by thinking in terms of resources and requests. The browser asks for a URL; the server returns content. This mental model simplifies debugging and architecture decisions.",
        "commonMistakes": [
          "Confusing websites with web servers (they are related but different).",
          "Assuming every UI change requires a server change."
        ],
        "exercises": [
          {
            "title": "Map the flow",
            "prompt": "Describe what happens when you open https://example.com in your browser. Include browser, DNS, server, and network steps.",
            "difficulty": "easy",
            "hints": [
              "Think: DNS lookup, TCP/TLS handshake, HTTP request/response"
            ],
            "solution": "Browser resolves DNS to IP -> TCP/TLS handshake (if HTTPS) -> browser sends HTTP GET -> server responds with HTML -> browser renders page, then requests CSS/JS/images referenced by HTML."
          }
        ],
        "quiz": [
          {
            "question": "Which component renders HTML and runs JavaScript?",
            "options": ["Server", "Browser", "DNS", "CDN"],
            "correctOption": [1]
          },
          {
            "question": "Which protocol is used to request web pages?",
            "options": ["FTP", "SMTP", "HTTP/HTTPS", "SSH"],
            "correctOption": [2]
          }
        ],
        "estimatedTime": 30,
        "resources": [
          {
            "title": "MDN — How the Web Works",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/How_the_Web_works",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "HTTP is the application-level protocol used for clients and servers to exchange resources. Requests have a method (GET, POST), a URL, headers and sometimes a body. Responses have status codes (200 OK, 404 Not Found, 500 Server Error). HTTPS adds encryption (TLS) ensuring confidentiality and integrity.",
        "examples": [
          "GET /index.html -> 200 OK with HTML body",
          "POST /api/login -> 200 OK with JSON body or 401 Unauthorized"
        ],
        "realWorldApplication": "When building features like forms or API calls, you need to know which HTTP method and status codes to use and how to secure data with HTTPS.",
        "expertInsights": "Use the right method (GET for safe reads, POST/PUT/PATCH for changes). Always use HTTPS in production — browsers and users expect secure transport.",
        "commonMistakes": [
          "Sending sensitive data over HTTP instead of HTTPS.",
          "Using GET for state-changing operations."
        ],
        "exercises": [
          {
            "title": "Inspect a request",
            "prompt": "Open your browser DevTools > Network, visit any website, and pick one request. Note method, status code, and headers.",
            "difficulty": "easy",
            "hints": [
              "Use DevTools Network tab",
              "Filter by document or XHR for API calls"
            ],
            "solution": "Example: GET / -> 200 OK, header: content-type: text/html; charset=UTF-8"
          }
        ],
        "quiz": [
          {
            "question": "Which status code usually means the request succeeded?",
            "options": ["200", "404", "500", "301"],
            "correctOption": [0]
          },
          {
            "question": "Which HTTP method should you use to fetch data without changing server state?",
            "options": ["GET", "POST", "DELETE", "PATCH"],
            "correctOption": [0]
          }
        ],
        "estimatedTime": 40,
        "resources": [
          {
            "title": "HTTP Overview — MDN",
            "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Browsers parse HTML into the DOM (Document Object Model), apply CSS to compute layout, and execute JavaScript. DevTools is a built-in suite for inspecting DOM, debugging JS, monitoring network requests, and profiling performance.",
        "examples": [
          "Using Elements panel to inspect and change HTML/CSS live.",
          "Using Network panel to see which resources are slow or failing."
        ],
        "realWorldApplication": "DevTools speeds up debugging, helps you find broken layout, slow resources, and JS errors quickly.",
        "expertInsights": "Learn to reproduce bugs in DevTools: change styles live, set breakpoints, and replay network requests. This is the fastest way to debug UI issues.",
        "commonMistakes": [
          "Not checking console errors when something breaks.",
          "Making permanent changes in DevTools instead of source files."
        ],
        "exercises": [
          {
            "title": "Use DevTools to fix a layout bug",
            "prompt": "Open DevTools on a simple page, change a CSS property in the Elements panel to fix a layout issue, and then copy the change to your source file.",
            "difficulty": "medium",
            "hints": [
              "Try changing display or margin properties",
              "Copy the final rule to your CSS file"
            ],
            "solution": "Example: changed .card { display: block; } to .card { display: flex; align-items: center; } and saved to styles.css"
          }
        ],
        "quiz": [
          {
            "question": "Which DevTools panel lets you inspect network requests?",
            "options": ["Console", "Elements", "Sources", "Network"],
            "correctOption": [3]
          },
          {
            "question": "The DOM stands for:",
            "options": [
              "Document Object Model",
              "Data Object Method",
              "Document Order Model",
              "Dynamic Object Mapping"
            ],
            "correctOption": [0]
          }
        ],
        "estimatedTime": 30,
        "resources": [
          {
            "title": "Chrome DevTools Overview",
            "url": "https://developer.chrome.com/docs/devtools/overview/",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "HTML (HyperText Markup Language) is used to structure content. Elements (tags) like `<header>`, `<main>`, `<section>`, `<p>`, `<a>`, `<img>` give meaning and accessibility to content. Use semantic tags rather than generic `<div>`s when appropriate.",
        "examples": [
          "<!doctype html>\n<html>\n  <head><title>My Page</title></head>\n  <body>\n    <header><h1>Welcome</h1></header>\n    <main><p>Hello world</p></main>\n  </body>\n</html>"
        ],
        "realWorldApplication": "Semantic HTML improves accessibility and SEO. Screen readers rely on proper tags to navigate content.",
        "expertInsights": "Start with semantic structure (header, nav, main, footer). Only add styling later. Good HTML reduces CSS complexity.",
        "commonMistakes": [
          "Overusing `<div>` instead of semantic tags.",
          "Forgetting alt text on images."
        ],
        "exercises": [
          {
            "title": "Create a simple page",
            "prompt": "Build a static HTML page with a header, navigation (3 links), a main article with a heading and paragraph, and a footer with contact info.",
            "difficulty": "easy",
            "hints": ["Use <nav> for links", "Include <main> and <footer>"],
            "solution": "<header><nav><a href=\"#\">Home</a> ...</nav></header>\n<main><article><h2>Title</h2><p>Content</p></article></main>\n<footer>Contact</footer>"
          }
        ],
        "quiz": [
          {
            "question": "Which tag is used for the main content of a page?",
            "options": ["<div>", "<main>", "<section>", "<span>"],
            "correctOption": [1]
          },
          {
            "question": "Why is alt text important for images?",
            "options": ["Performance", "Accessibility", "Styling", "SEO only"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 60,
        "resources": [
          {
            "title": "HTML basics — MDN",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "CSS (Cascading Style Sheets) controls presentation: colors, spacing, layout. Important fundamentals: the box model (content, padding, border, margin), selectors, and layout modes like block, inline, flexbox, and basic grid.",
        "examples": [
          ".card { padding: 16px; border: 1px solid #ddd; }",
          ".row { display: flex; gap: 12px; }"
        ],
        "realWorldApplication": "Understanding the box model and flexbox is essential for building responsive UIs quickly.",
        "expertInsights": "Use small, reusable utility classes at first (e.g., .mt-4). Learn flexbox before complex grid layouts — it solves most layout problems for beginners.",
        "commonMistakes": [
          "Forgetting to set box-sizing: border-box; leading to confusing widths.",
          "Using too many nested selectors, causing specificity issues."
        ],
        "exercises": [
          {
            "title": "Style your page",
            "prompt": "Take the HTML page from the previous exercise. Add styles to make the header sticky, center the main article, and style nav links.",
            "difficulty": "medium",
            "hints": [
              "Use display:flex for nav",
              "Use max-width and margin: 0 auto for centering"
            ],
            "solution": "header { position: sticky; top:0; } main { max-width: 800px; margin: 24px auto; } nav a { margin-right: 12px; }"
          }
        ],
        "quiz": [
          {
            "question": "Which CSS property controls the space between an element's border and its content?",
            "options": ["margin", "padding", "border", "gap"],
            "correctOption": [1]
          },
          {
            "question": "Which layout model is best for 1D layouts (row or column)?",
            "options": ["Grid", "Flexbox", "Table", "Float"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 75,
        "resources": [
          {
            "title": "A Complete Guide to Flexbox",
            "url": "https://css-tricks.com/snippets/css/a-guide-to-flexbox/",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "A smooth developer workflow includes a code editor (VS Code), basic Git for version control, and a simple deployment path for static sites. GitHub Pages and Vercel allow you to deploy static pages from a Git repository in minutes.",
        "examples": [
          "Create a Git repo, commit your HTML/CSS, and push to GitHub. Enable GitHub Pages to publish.",
          "Connect a repo to Vercel to get continuous deploys on every push."
        ],
        "realWorldApplication": "You’ll publish your first portfolio or project to share with others and to include in your resume.",
        "expertInsights": "Learn Git basics: clone, add, commit, push, and a simple branching model. Use meaningful commit messages and small commits.",
        "commonMistakes": [
          "Not committing frequently enough (losing progress).",
          "Pushing secrets (API keys) to public repos."
        ],
        "exercises": [
          {
            "title": "Deploy your page",
            "prompt": "Initialize a Git repo with your HTML/CSS, push to GitHub, and deploy the site using GitHub Pages or Vercel. Share the live URL.",
            "difficulty": "medium",
            "hints": [
              "Create a README with deployment steps",
              "Use gh-pages branch for GitHub Pages or connect to Vercel"
            ],
            "solution": "Create repo, git add ., git commit -m 'initial', git push origin main, enable GitHub Pages or connect repo in Vercel and deploy."
          }
        ],
        "quiz": [
          {
            "question": "Which command stages files for a commit?",
            "options": ["git push", "git add", "git commit", "git clone"],
            "correctOption": [1]
          },
          {
            "question": "Which platform can continuously deploy a static site from a Git repo?",
            "options": ["Vercel", "MySQL", "Redis", "Docker"],
            "correctOption": [0]
          }
        ],
        "estimatedTime": 90,
        "resources": [
          {
            "title": "Getting started with Git — GitHub Learning Lab",
            "url": "https://lab.github.com/",
            "type": "article"
          },
          {
            "title": "Vercel Docs — Deploying Static Sites",
            "url": "https://vercel.com/docs/platform/deployments",
            "type": "doc"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "meta": {
      "generatedAt": "2025-09-16T00:00:00.000Z",
      "version": "1.0"
    }
  },
  {
    "domains": [
      {
        "name": "Web Development",
        "slug": "web-development",
        "description": "Explore the essentials of web development with a focus on HTML, the cornerstone of structuring content on the web, including semantic markup, accessibility, and modern best practices.",
        "courseCount": 1,
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "courses": [
      {
        "title": "HTML Deep Dive: Structuring the Web",
        "slug": "html-deep-dive",
        "shortDescription": "A beginner-to-intermediate course on mastering HTML, covering document structure, semantic elements, forms, and accessibility for robust web pages.",
        "longDescription": "This course provides a comprehensive exploration of HTML, the foundational language for structuring web content. You’ll learn how to create well-organized, accessible, and semantic web pages using HTML5 elements and attributes. The course covers the HTML document structure, semantic tags, forms with validation, and accessibility practices like ARIA landmarks. Through hands-on exercises, real-world examples, and quizzes, you’ll build a fully functional static web page and deploy it, gaining practical skills to write clean, maintainable, and user-friendly HTML code. The course also introduces how HTML integrates with CSS and JavaScript in the broader web development ecosystem.",
        "tags": [
          "html",
          "web",
          "accessibility",
          "semantic",
          "beginner",
          "frontend"
        ],
        "thumbnail": "https://example.com/thumbnails/html-deep-dive.jpg",

        "levelSummary": [
          {
            "level": "Beginner",
            "overview": "Learn HTML fundamentals and build accessible, semantic web pages from scratch.",
            "moduleCount": 1
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "modules": [
      {
        "title": "Module 1 — Mastering HTML Essentials",
        "slug": "mastering-html-essentials",
        "description": "Dive into the core concepts of HTML, including document structure, semantic elements, forms, and accessibility best practices for modern web development.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "lessons": [
      {
        "title": "Introduction to HTML",
        "slug": "intro-to-html",
        "description": "Understand HTML’s role in web development, its history, and the basic structure of an HTML5 document.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "HTML Elements and Attributes",
        "slug": "html-elements-attributes",
        "description": "Explore how HTML elements and attributes work together to define content structure and functionality.",

        "order": 2,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Semantic HTML",
        "slug": "semantic-html",
        "description": "Learn to use semantic HTML5 elements to enhance accessibility, SEO, and code maintainability.",

        "order": 3,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "HTML Forms and Inputs",
        "slug": "html-forms-inputs",
        "description": "Create interactive forms with various input types, labels, and validation for user engagement.",

        "order": 4,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Accessibility in HTML",
        "slug": "accessibility-in-html",
        "description": "Implement accessibility best practices using ARIA attributes and proper HTML structure.",

        "order": 5,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Deploying an HTML Page",
        "slug": "deploying-html-page",
        "description": "Learn to use Git and platforms like GitHub Pages or Vercel to deploy your HTML project.",

        "order": 6,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "learningContents": [
      {
        "explanation": "HTML (HyperText Markup Language) is the foundation of web development, used to structure content on the internet. It defines the skeleton of a web page using tags like `<html>`, `<head>`, and `<body>`. HTML5, the latest version, introduced new semantic elements and APIs to support modern web applications. An HTML document starts with a DOCTYPE declaration, followed by nested elements that form a tree-like structure (the DOM). This lesson covers the history of HTML, its evolution from HTML4 to HTML5, and how it integrates with CSS for styling and JavaScript for interactivity. Understanding HTML’s role is critical for building accessible, SEO-friendly, and maintainable web pages.",
        "examples": [
          "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>My First Page</title>\n  </head>\n  <body>\n    <h1>Hello, World!</h1>\n  </body>\n</html>",
          "A simple HTML page with a heading and paragraph."
        ],
        "realWorldApplication": "HTML is used in every website and web application to define content structure, from simple blogs to complex platforms like e-commerce sites.",
        "expertInsights": "Always declare the DOCTYPE and set the `lang` attribute on the `<html>` tag for accessibility and internationalization. Structure your HTML logically before adding styles or scripts.",
        "commonMistakes": [
          "Omitting the DOCTYPE declaration, causing browsers to render in quirks mode.",
          "Nesting tags incorrectly, like placing `<p>` inside `<h1>`."
        ],
        "exercises": [
          {
            "title": "Create a Basic HTML Document",
            "prompt": "Write an HTML5 document with a proper DOCTYPE, `<html>`, `<head>`, and `<body>`, including a heading and paragraph.",
            "difficulty": "easy",
            "hints": [
              "Start with <!DOCTYPE html>",
              "Include lang=\"en\" in the <html> tag"
            ],
            "solution": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Sample Page</title>\n  </head>\n  <body>\n    <h1>Welcome</h1>\n    <p>This is my first page.</p>\n  </body>\n</html>"
          }
        ],
        "quiz": [
          {
            "question": "What does the DOCTYPE declaration do?",
            "options": [
              "Styles the page",
              "Defines the HTML version",
              "Loads JavaScript",
              "Sets the language"
            ],
            "correctOption": [1]
          },
          {
            "question": "Which tag contains metadata like the page title?",
            "options": ["<body>", "<html>", "<head>", "<main>"],
            "correctOption": [2]
          }
        ],
        "estimatedTime": 30,
        "resources": [
          {
            "title": "MDN — Getting Started with HTML",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "HTML elements are the building blocks of a web page, defined by tags like `<p>`, `<a>`, or `<div>`. Attributes, such as `id`, `class`, or `href`, provide additional information or functionality to elements. For example, `<a href=\"https://example.com\">Link</a>` creates a hyperlink. This lesson explores common elements (e.g., headings, lists, images) and attributes (e.g., `alt`, `src`, `data-*`), their syntax, and how they shape the DOM. You’ll learn the difference between block and inline elements, how attributes modify behavior, and best practices for using global attributes effectively.",
        "examples": [
          "<img src=\"image.jpg\" alt=\"Description\" width=\"300\">",
          "<a href=\"https://example.com\" target=\"_blank\">Visit Site</a>"
        ],
        "realWorldApplication": "Elements and attributes are critical for creating navigable, interactive, and visually structured web content, like menus or image galleries.",
        "expertInsights": "Use specific attributes like `alt` for accessibility and `data-*` for custom metadata. Avoid deprecated attributes like `align` in favor of CSS.",
        "commonMistakes": [
          "Forgetting to close tags, causing parsing issues.",
          "Using attributes incorrectly, like `href` on a non-anchor tag."
        ],
        "exercises": [
          {
            "title": "Build a Navigation Menu",
            "prompt": "Create an HTML unordered list with three anchor tags, each linking to a different URL with a descriptive title attribute.",
            "difficulty": "easy",
            "hints": [
              "Use <ul> and <li> for the list",
              "Add title attributes to <a> tags"
            ],
            "solution": "<ul>\n  <li><a href=\"https://example.com\" title=\"Home page\">Home</a></li>\n  <li><a href=\"/about\" title=\"About us\">About</a></li>\n  <li><a href=\"/contact\" title=\"Contact info\">Contact</a></li>\n</ul>"
          }
        ],
        "quiz": [
          {
            "question": "Which attribute specifies the destination of a hyperlink?",
            "options": ["src", "href", "alt", "id"],
            "correctOption": [1]
          },
          {
            "question": "What type of element is `<div>`?",
            "options": ["Inline", "Block", "Table", "Semantic"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 45,
        "resources": [
          {
            "title": "MDN — HTML Elements Reference",
            "url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Semantic HTML uses elements like `<header>`, `<nav>`, `<main>`, `<article>`, and `<footer>` to describe the meaning of content, improving accessibility, SEO, and code clarity. Unlike generic `<div>` tags, semantic elements convey purpose to browsers, screen readers, and search engines. This lesson covers HTML5 semantic elements, their proper use, and how they enhance the user experience for assistive technologies. You’ll also learn how semantic markup reduces reliance on complex CSS and JavaScript for structural clarity.",
        "examples": [
          "<header>\n  <h1>Site Title</h1>\n  <nav>...</nav>\n</header>",
          "<article>\n  <h2>Blog Post</h2>\n  <p>Content...</p>\n</article>"
        ],
        "realWorldApplication": "Semantic HTML ensures screen readers can navigate your site, and search engines can index content more effectively.",
        "expertInsights": "Always prioritize semantic elements over `<div>` or `<span>` for structural clarity. Use `<section>` and `<article>` to group related content logically.",
        "commonMistakes": [
          "Overusing `<div>` instead of semantic tags like `<main>` or `<nav>.",
          "Nesting semantic elements incorrectly, like `<header>` inside `<footer>`."
        ],
        "exercises": [
          {
            "title": "Convert Divs to Semantic Tags",
            "prompt": "Rewrite a page using `<div>` tags into semantic HTML with `<header>`, `<nav>`, `<main>`, and `<footer>`.",
            "difficulty": "medium",
            "hints": [
              "Replace <div id=\"header\"> with <header>",
              "Ensure <main> contains the primary content"
            ],
            "solution": "<header><h1>Title</h1></header>\n<nav>...</nav>\n<main><article>...</article></main>\n<footer>...</footer>"
          }
        ],
        "quiz": [
          {
            "question": "Which tag is best for primary navigation?",
            "options": ["<div>", "<nav>", "<main>", "<section>"],
            "correctOption": [1]
          },
          {
            "question": "Why is semantic HTML important?",
            "options": [
              "Faster rendering",
              "Better accessibility",
              "More styles",
              "Smaller file size"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 50,
        "resources": [
          {
            "title": "MDN — Semantic HTML",
            "url": "https://developer.mozilla.org/en-US/docs/Glossary/Semantics#Semantics_in_HTML",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "HTML forms enable user interaction through inputs like text fields, checkboxes, and buttons. Elements like `<form>`, `<input>`, `<label>`, and `<select>` allow data collection and submission. This lesson covers form structure, input types (e.g., `text`, `email`, `password`), attributes for validation (e.g., `required`, `pattern`), and how to make forms accessible with proper labeling. You’ll learn how forms communicate with servers via HTTP methods (GET/POST) and how to handle user input effectively.",
        "examples": [
          "<form action=\"/submit\" method=\"POST\">\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" id=\"name\" required>\n  <button type=\"submit\">Submit</button>\n</form>",
          "<select name=\"options\">\n  <option value=\"1\">Option 1</option>\n</select>"
        ],
        "realWorldApplication": "Forms are used for user logins, search bars, contact pages, and data submission in web applications.",
        "expertInsights": "Always pair `<input>` with `<label>` using the `for` attribute for accessibility. Use client-side validation to improve UX, but always validate on the server too.",
        "commonMistakes": [
          "Forgetting to include `for` attributes on labels.",
          "Not specifying the `method` or `action` attributes on forms."
        ],
        "exercises": [
          {
            "title": "Build a Contact Form",
            "prompt": "Create a form with fields for name, email, and message, including labels, validation, and a submit button.",
            "difficulty": "medium",
            "hints": [
              "Use type=\"email\" for email validation",
              "Add required attribute to key fields"
            ],
            "solution": "<form action=\"/contact\" method=\"POST\">\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" id=\"name\" required>\n  <label for=\"email\">Email:</label>\n  <input type=\"email\" id=\"email\" required>\n  <label for=\"message\">Message:</label>\n  <textarea id=\"message\" required></textarea>\n  <button type=\"submit\">Send</button>\n</form>"
          }
        ],
        "quiz": [
          {
            "question": "Which input type is best for email addresses?",
            "options": ["text", "email", "url", "number"],
            "correctOption": [1]
          },
          {
            "question": "What attribute links a label to an input?",
            "options": ["id", "name", "for", "type"],
            "correctOption": [2]
          }
        ],
        "estimatedTime": 60,
        "resources": [
          {
            "title": "MDN — HTML Forms Guide",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/Forms",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Accessibility in HTML ensures web content is usable by everyone, including those using assistive technologies like screen readers. Techniques include using semantic elements, adding `alt` text to images, implementing ARIA (Accessible Rich Internet Applications) attributes, and ensuring keyboard navigability. This lesson covers how to make HTML accessible by using landmarks (e.g., `<main>`, `<nav>`), ARIA roles, and proper focus management, along with tools to test accessibility compliance.",
        "examples": [
          "<img src=\"photo.jpg\" alt=\"A sunset over the ocean\">",
          "<button aria-label=\"Close dialog\">X</button>"
        ],
        "realWorldApplication": "Accessible HTML ensures compliance with legal standards (e.g., WCAG) and improves usability for all users, including those with disabilities.",
        "expertInsights": "Test your pages with screen readers (e.g., NVDA, VoiceOver) and ensure all interactive elements are keyboard-accessible. Use ARIA sparingly—semantic HTML is often enough.",
        "commonMistakes": [
          "Omitting `alt` text on images, breaking screen reader compatibility.",
          "Using ARIA attributes unnecessarily when semantic HTML suffices."
        ],
        "exercises": [
          {
            "title": "Make a Page Accessible",
            "prompt": "Add accessibility features to a simple HTML page, including `alt` text, ARIA landmarks, and keyboard focus for a button.",
            "difficulty": "medium",
            "hints": [
              "Use role=\"main\" for the main content area",
              "Add tabindex=\"0\" for keyboard focus"
            ],
            "solution": "<main role=\"main\">\n  <img src=\"img.jpg\" alt=\"Description\">\n  <button tabindex=\"0\" aria-label=\"Toggle menu\">Menu</button>\n</main>"
          }
        ],
        "quiz": [
          {
            "question": "What does the `alt` attribute do?",
            "options": [
              "Styles images",
              "Describes images for screen readers",
              "Links images",
              "Loads images faster"
            ],
            "correctOption": [1]
          },
          {
            "question": "Which ARIA attribute defines a navigation region?",
            "options": [
              "role=\"banner\"",
              "role=\"navigation\"",
              "role=\"main\"",
              "role=\"content\""
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 50,
        "resources": [
          {
            "title": "MDN — Accessibility in HTML",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Deploying an HTML page makes your work accessible online. Using Git for version control and platforms like GitHub Pages or Vercel, you can publish static HTML sites quickly. This lesson covers setting up a Git repository, committing HTML files, and deploying to a hosting platform. You’ll learn basic Git commands (e.g., `add`, `commit`, `push`) and how to configure a simple deployment pipeline for continuous updates.",
        "examples": [
          "Create a Git repo, add index.html, commit, and deploy to GitHub Pages.",
          "Connect a repo to Vercel for automatic deploys on each push."
        ],
        "realWorldApplication": "Deploying your HTML project allows you to showcase your portfolio or share prototypes with clients and collaborators.",
        "expertInsights": "Keep your Git commits small and descriptive. Use a `.gitignore` file to exclude sensitive or unnecessary files from deployment.",
        "commonMistakes": [
          "Pushing sensitive data (e.g., API keys) to a public repository.",
          "Forgetting to configure the deployment platform correctly."
        ],
        "exercises": [
          {
            "title": "Deploy an HTML Page",
            "prompt": "Create a simple HTML page, initialize a Git repo, push it to GitHub, and deploy it using GitHub Pages or Vercel.",
            "difficulty": "medium",
            "hints": [
              "Use `git add .` to stage all files",
              "Check platform-specific deployment settings"
            ],
            "solution": "Create index.html, run `git init`, `git add .`, `git commit -m 'Initial HTML page'`, `git push origin main`, then enable GitHub Pages or link to Vercel."
          }
        ],
        "quiz": [
          {
            "question": "Which Git command stages files for a commit?",
            "options": ["git push", "git add", "git commit", "git clone"],
            "correctOption": [1]
          },
          {
            "question": "Which platform supports static site deployment?",
            "options": ["MySQL", "Vercel", "MongoDB", "Redis"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 75,
        "resources": [
          {
            "title": "GitHub Pages Documentation",
            "url": "https://docs.github.com/en/pages",
            "type": "doc"
          },
          {
            "title": "Vercel — Getting Started",
            "url": "https://vercel.com/docs/getting-started",
            "type": "doc"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "meta": {
      "generatedAt": "2025-09-16T00:00:00.000Z",
      "version": "1.0"
    }
  },

  {
    "domains": [
      {
        "name": "Web Development",
        "slug": "web-development",
        "description": "Master the essentials of web development with a focus on CSS, the language for styling web content, covering selectors, the box model, colors, and typography.",
        "courseCount": 1,
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "courses": [
      {
        "title": "CSS Essentials: Styling the Web",
        "slug": "css-essentials-styling-web",
        "shortDescription": "A beginner-friendly course on CSS, teaching core concepts like selectors, the box model, colors, and typography to create visually appealing web pages.",
        "longDescription": "This course provides a comprehensive introduction to CSS (Cascading Style Sheets), the language used to style and layout web content. You'll learn how to use selectors to target HTML elements, apply the box model for spacing and layout, choose and customize colors, and control typography for readable, attractive designs. Through practical exercises, real-world examples, and quizzes, you'll style a complete web page, mastering CSS properties and best practices. The course also covers how CSS integrates with HTML and introduces responsive design principles, preparing you to create visually consistent and accessible web interfaces.",
        "tags": ["css", "web", "styling", "typography", "beginner", "frontend"],
        "thumbnail": "https://example.com/thumbnails/css-essentials.jpg",

        "levelSummary": [
          {
            "level": "Beginner",
            "overview": "Learn CSS fundamentals and style a responsive, visually appealing web page.",
            "moduleCount": 1
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "modules": [
      {
        "title": "Module 1 — Core CSS Concepts",
        "slug": "core-css-concepts",
        "description": "Explore the fundamentals of CSS, including selectors, the box model, color systems, and typography for effective web styling.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "lessons": [
      {
        "title": "Introduction to CSS",
        "slug": "intro-to-css",
        "description": "Understand the role of CSS in web development, its syntax, and how to apply styles to HTML elements.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "CSS Selectors",
        "slug": "css-selectors",
        "description": "Learn how to target HTML elements using CSS selectors, including type, class, ID, and advanced combinators.",

        "order": 2,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "The Box Model",
        "slug": "css-box-model",
        "description": "Master the CSS box model to control spacing, borders, and layout of web elements.",

        "order": 3,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Colors in CSS",
        "slug": "css-colors",
        "description": "Explore CSS color systems, including named colors, hex, RGB, and HSL, for vibrant designs.",

        "order": 4,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Typography in CSS",
        "slug": "css-typography",
        "description": "Control text appearance with CSS typography properties like font-family, font-size, and line-height.",

        "order": 5,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Applying CSS to a Project",
        "slug": "css-project",
        "description": "Combine CSS selectors, box model, colors, and typography to style and deploy a styled web page.",

        "order": 6,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "learningContents": [
      {
        "explanation": "CSS (Cascading Style Sheets) is the language used to style and layout web pages, controlling their visual appearance. It works alongside HTML to define how elements look, from colors and fonts to positioning and spacing. CSS rules consist of selectors that target elements and declarations that define styles. This lesson covers CSS syntax, ways to apply CSS (inline, internal, external), the cascade and specificity, and its role in modern web development. You'll learn how CSS integrates with HTML to create visually appealing, user-friendly interfaces and sets the foundation for responsive design.",
        "examples": [
          "h1 { color: blue; font-size: 24px; }",
          "<link rel=\"stylesheet\" href=\"styles.css\">"
        ],
        "realWorldApplication": "CSS is used in every website to style layouts, from simple blogs to complex e-commerce platforms, ensuring consistent and attractive designs.",
        "expertInsights": "Always use external stylesheets for maintainability. Understand the cascade to avoid specificity conflicts, and prefer classes over IDs for reusable styles.",
        "commonMistakes": [
          "Overusing !important, leading to specificity issues.",
          "Not separating CSS from HTML, causing maintenance challenges."
        ],
        "exercises": [
          {
            "title": "Apply Basic CSS",
            "prompt": "Create an HTML page with a heading and paragraph, and use an external CSS file to style the heading blue and the paragraph with a 16px font size.",
            "difficulty": "easy",
            "hints": [
              "Use a <link> tag to connect the CSS file",
              "Target elements with type selectors"
            ],
            "solution": "HTML: <h1>Title</h1><p>Text</p>\nCSS: h1 { color: blue; } p { font-size: 16px; }"
          }
        ],
        "quiz": [
          {
            "question": "What does CSS stand for?",
            "options": [
              "Cascading Style Sheets",
              "Creative Style System",
              "Content Style Sheets",
              "Cascading Script System"
            ],
            "correctOption": [0]
          },
          {
            "question": "How do you apply an external CSS file?",
            "options": ["<style>", "<script>", "<link>", "<css>"],
            "correctOption": [2]
          }
        ],
        "estimatedTime": 30,
        "resources": [
          {
            "title": "MDN — CSS Basics",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "CSS selectors are patterns used to target HTML elements for styling. Common selectors include type (e.g., `h1`), class (`.class`), ID (`#id`), and combinators (e.g., `div p`). Advanced selectors like pseudo-classes (`:hover`) and pseudo-elements (`::before`) add dynamic and structural styling. This lesson covers selector types, specificity rules, and how to combine selectors effectively to target specific elements without redundancy, ensuring clean and maintainable stylesheets.",
        "examples": [
          ".card { background-color: #f0f0f0; }",
          "nav > a:hover { color: red; }"
        ],
        "realWorldApplication": "Selectors are used to style specific parts of a webpage, like navigation menus, buttons, or form inputs, ensuring consistent design across pages.",
        "expertInsights": "Favor class selectors for reusability. Avoid overly specific selectors (e.g., `div.section > p`) to keep CSS flexible and maintainable.",
        "commonMistakes": [
          "Using IDs for styling, causing specificity conflicts.",
          "Overusing complex selectors, making CSS hard to debug."
        ],
        "exercises": [
          {
            "title": "Style with Selectors",
            "prompt": "Create an HTML page with a nav and main section. Use class and pseudo-class selectors to style nav links blue and red on hover.",
            "difficulty": "easy",
            "hints": [
              "Use a class for nav links",
              "Apply :hover for interactive styling"
            ],
            "solution": "HTML: <nav><a class=\"nav-link\">Link</a></nav>\nCSS: .nav-link { color: blue; } .nav-link:hover { color: red; }"
          }
        ],
        "quiz": [
          {
            "question": "Which selector targets an element with id=\"main\"?",
            "options": [".main", "#main", "main", "[main]"],
            "correctOption": [1]
          },
          {
            "question": "What does the :hover pseudo-class do?",
            "options": [
              "Selects first child",
              "Styles on mouseover",
              "Selects last child",
              "Styles active element"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 45,
        "resources": [
          {
            "title": "MDN — CSS Selectors",
            "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "The CSS box model defines how elements are sized and spaced, consisting of content, padding, border, and margin. Properties like `width`, `padding`, `border`, and `margin` control layout, while `box-sizing: border-box` simplifies calculations. This lesson explores the box model, its impact on layout, and how to use it to create consistent spacing and alignment in web designs, including practical debugging with browser DevTools.",
        "examples": [
          ".box { width: 200px; padding: 10px; border: 1px solid black; margin: 20px; box-sizing: border-box; }",
          ".container { margin: 0 auto; max-width: 800px; }"
        ],
        "realWorldApplication": "The box model is critical for creating layouts like card grids, navigation bars, and centered content areas in responsive designs.",
        "expertInsights": "Always set `box-sizing: border-box` globally to make sizing predictable. Use DevTools to visualize the box model and debug layout issues.",
        "commonMistakes": [
          "Forgetting box-sizing, leading to unexpected element sizes.",
          "Misusing margin vs. padding, causing layout misalignment."
        ],
        "exercises": [
          {
            "title": "Create a Card Layout",
            "prompt": "Style a div as a card with fixed width, padding, border, and centered margin using the box model.",
            "difficulty": "medium",
            "hints": [
              "Set box-sizing: border-box",
              "Use margin: 0 auto for centering"
            ],
            "solution": ".card { width: 300px; padding: 15px; border: 2px solid #ccc; margin: 20px auto; box-sizing: border-box; }"
          }
        ],
        "quiz": [
          {
            "question": "Which property adds space inside an element’s border?",
            "options": ["margin", "padding", "border", "width"],
            "correctOption": [1]
          },
          {
            "question": "What does box-sizing: border-box do?",
            "options": [
              "Increases margin",
              "Includes padding/border in width",
              "Centers content",
              "Removes borders"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 50,
        "resources": [
          {
            "title": "MDN — The Box Model",
            "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Colors in CSS define the visual aesthetic of a webpage, using formats like named colors (e.g., `red`), hexadecimal (`#FF0000`), RGB (`rgb(255, 0, 0)`), and HSL (`hsl(0, 100%, 50%)`). This lesson covers color systems, their use cases, and how to create accessible color schemes with sufficient contrast. You'll learn to apply colors to text, backgrounds, and borders, and explore tools like color pickers and contrast checkers to ensure usability.",
        "examples": [
          "body { background-color: #f0f0f0; color: rgb(0, 0, 0); }",
          "a { color: hsl(240, 100%, 50%); }"
        ],
        "realWorldApplication": "Colors enhance user experience in branding, buttons, and visual hierarchy, while accessible contrast ensures readability for all users.",
        "expertInsights": "Use HSL for easier color manipulation and always check contrast ratios (WCAG 4.5:1 for text). Define a color palette early to maintain consistency.",
        "commonMistakes": [
          "Using low-contrast colors, reducing readability.",
          "Mixing too many color formats, causing inconsistency."
        ],
        "exercises": [
          {
            "title": "Style with Colors",
            "prompt": "Style a button with a blue background and white text, ensuring accessible contrast, using HSL.",
            "difficulty": "easy",
            "hints": [
              "Use hsl() for the button background",
              "Test contrast with a tool like WebAIM"
            ],
            "solution": "button { background-color: hsl(220, 80%, 50%); color: hsl(0, 0%, 100%); padding: 10px; }"
          }
        ],
        "quiz": [
          {
            "question": "Which CSS color format allows hue-based adjustments?",
            "options": ["Hex", "RGB", "HSL", "Named"],
            "correctOption": [2]
          },
          {
            "question": "What is the minimum contrast ratio for accessible text (WCAG)?",
            "options": ["2:1", "3:1", "4.5:1", "7:1"],
            "correctOption": [2]
          }
        ],
        "estimatedTime": 40,
        "resources": [
          {
            "title": "MDN — CSS Colors",
            "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/color_value",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Typography in CSS controls text appearance, using properties like `font-family`, `font-size`, `line-height`, `font-weight`, and `text-align`. These properties ensure text is readable, aesthetically pleasing, and consistent across devices. This lesson covers choosing web-safe fonts, setting responsive font sizes (e.g., `rem`, `vw`), and optimizing typography for accessibility. You'll learn how typography impacts user experience and how to create a typographic hierarchy for clear content structure.",
        "examples": [
          "body { font-family: Arial, sans-serif; font-size: 16px; line-height: 1.5; }",
          "h1 { font-weight: 700; text-align: center; }"
        ],
        "realWorldApplication": "Typography is crucial for readable forms, articles, and navigation, ensuring users can easily consume content across devices.",
        "expertInsights": "Use relative units like `rem` or `em` for scalability. Define a typographic scale (e.g., 1.2x for headings) to maintain visual hierarchy.",
        "commonMistakes": [
          "Using too many font families, causing visual clutter.",
          "Setting font sizes too small, reducing accessibility."
        ],
        "exercises": [
          {
            "title": "Create a Typographic Hierarchy",
            "prompt": "Style an HTML page with a heading, subheading, and paragraph, using a consistent font-family, scaled font sizes, and proper line-height.",
            "difficulty": "medium",
            "hints": [
              "Use rem for font sizes",
              "Set line-height to 1.5 for readability"
            ],
            "solution": "h1 { font-family: Arial, sans-serif; font-size: 2rem; } h2 { font-size: 1.5rem; } p { font-size: 1rem; line-height: 1.5; }"
          }
        ],
        "quiz": [
          {
            "question": "Which unit is relative to the root font size?",
            "options": ["px", "rem", "em", "vw"],
            "correctOption": [1]
          },
          {
            "question": "What property controls text boldness?",
            "options": [
              "font-size",
              "font-weight",
              "line-height",
              "text-align"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 50,
        "resources": [
          {
            "title": "MDN — CSS Typography",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text/Fundamentals",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Applying CSS to a project involves combining selectors, the box model, colors, and typography to create a cohesive design. This lesson guides you through styling a complete HTML page, using Git for version control, and deploying it to platforms like GitHub Pages or Vercel. You'll learn to organize CSS files, apply responsive design principles, and test your styles in browser DevTools to ensure consistency and accessibility.",
        "examples": [
          ".container { max-width: 800px; margin: 0 auto; padding: 20px; font-family: Arial, sans-serif; }",
          "Deploy a styled page to GitHub Pages with a clean Git commit history."
        ],
        "realWorldApplication": "Styling and deploying a project showcases your skills in portfolios, client prototypes, or personal websites.",
        "expertInsights": "Organize CSS with modular files or naming conventions like BEM. Test responsiveness early and use DevTools to debug layout issues.",
        "commonMistakes": [
          "Writing disorganized CSS, making maintenance difficult.",
          "Not testing styles on multiple devices before deployment."
        ],
        "exercises": [
          {
            "title": "Style and Deploy a Page",
            "prompt": "Style an HTML page with a header, content area, and footer using CSS selectors, box model, colors, and typography. Deploy it using GitHub Pages.",
            "difficulty": "medium",
            "hints": [
              "Use a single external CSS file",
              "Commit changes with clear messages"
            ],
            "solution": "CSS: .container { max-width: 800px; margin: 0 auto; font-family: Arial, sans-serif; } h1 { color: hsl(220, 80%, 50%); }\nGit: git add ., git commit -m 'Styled page', git push, enable GitHub Pages."
          }
        ],
        "quiz": [
          {
            "question": "Which tool helps debug CSS in the browser?",
            "options": ["Console", "Network", "DevTools", "Sources"],
            "correctOption": [2]
          },
          {
            "question": "What platform can deploy a styled static site?",
            "options": ["MySQL", "Vercel", "MongoDB", "Redis"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 75,
        "resources": [
          {
            "title": "CSS Tricks — A Complete Guide to CSS",
            "url": "https://css-tricks.com/guides/beginner/",
            "type": "article"
          },
          {
            "title": "Vercel — Deploying Static Sites",
            "url": "https://vercel.com/docs/platform/deployments",
            "type": "doc"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "meta": {
      "generatedAt": "2025-09-16T00:00:00.000Z",
      "version": "1.0"
    }
  },
  {
    "domains": [
      {
        "name": "Web Development",
        "slug": "web-development",
        "description": "Master CSS layout and responsive design techniques, including Flexbox, Grid, media queries, and responsive patterns to create adaptable, user-friendly web layouts.",
        "courseCount": 1,
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "courses": [
      {
        "title": "CSS Layout & Responsive Design: Building Adaptive Interfaces",
        "slug": "css-layout-responsive-design",
        "shortDescription": "A beginner-to-intermediate course on CSS layout techniques, focusing on Flexbox, Grid, media queries, and responsive patterns for cross-device compatibility.",
        "longDescription": "This course explores CSS layout and responsive design, equipping you with the skills to create flexible and adaptive web interfaces. You’ll learn to use Flexbox for one-dimensional layouts, CSS Grid for two-dimensional designs, media queries for device-specific styling, and responsive patterns to ensure usability across screen sizes. Through hands-on exercises, real-world examples, and quizzes, you’ll build and deploy a responsive web page, mastering layout techniques and debugging with browser DevTools. The course also covers best practices for accessibility and performance in responsive design, preparing you for modern web development challenges.",
        "tags": ["css", "web", "flexbox", "grid", "responsive", "frontend"],
        "thumbnail": "https://example.com/thumbnails/css-layout-responsive.jpg",

        "levelSummary": [
          {
            "level": "Beginner to Intermediate",
            "overview": "Learn CSS Flexbox, Grid, media queries, and responsive patterns to build adaptive web layouts.",
            "moduleCount": 1
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "modules": [
      {
        "title": "Module 1 — CSS Layout and Responsive Design",
        "slug": "css-layout-responsive-design",
        "description": "Master CSS layout systems like Flexbox and Grid, and use media queries and responsive patterns for adaptive web designs.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "lessons": [
      {
        "title": "Introduction to CSS Layouts",
        "slug": "intro-css-layouts",
        "description": "Understand the basics of CSS layout systems and their role in creating structured, responsive web designs.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Flexbox Fundamentals",
        "slug": "flexbox-fundamentals",
        "description": "Learn CSS Flexbox to create flexible, one-dimensional layouts for rows or columns.",

        "order": 2,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "CSS Grid Basics",
        "slug": "css-grid-basics",
        "description": "Master CSS Grid for powerful two-dimensional layouts with precise control over rows and columns.",

        "order": 3,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Media Queries for Responsive Design",
        "slug": "media-queries-responsive",
        "description": "Use CSS media queries to adapt layouts for different screen sizes and devices.",

        "order": 4,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Responsive Design Patterns",
        "slug": "responsive-design-patterns",
        "description": "Explore common responsive design patterns like fluid grids, flexible images, and mobile-first approaches.",

        "order": 5,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Building and Deploying a Responsive Layout",
        "slug": "responsive-layout-deploy",
        "description": "Combine Flexbox, Grid, and media queries to build and deploy a responsive web page using Git and hosting platforms.",

        "order": 6,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "learningContents": [
      {
        "explanation": "CSS layouts define how elements are arranged on a web page, enabling structured and visually appealing designs. Traditional layout techniques like floats have been largely replaced by modern systems like Flexbox and CSS Grid, which offer more control and flexibility. This lesson introduces the evolution of CSS layouts, their role in responsive design, and how to choose between Flexbox and Grid based on layout needs. You’ll learn the basics of positioning elements, handling responsiveness, and using browser DevTools to debug layout issues, setting the foundation for creating adaptive web interfaces.",
        "examples": [
          ".container { display: flex; gap: 10px; }",
          ".grid { display: grid; grid-template-columns: 1fr 1fr; }"
        ],
        "realWorldApplication": "Layouts are used in every website to structure content, from navigation bars to complex dashboards, ensuring usability across devices.",
        "expertInsights": "Start with Flexbox for simpler layouts and use Grid for complex, two-dimensional designs. Always test layouts on multiple screen sizes early in development.",
        "commonMistakes": [
          "Using outdated techniques like floats for modern layouts.",
          "Not planning for responsiveness, leading to broken designs on mobile."
        ],
        "exercises": [
          {
            "title": "Create a Basic Layout",
            "prompt": "Build an HTML page with a header, main content, and footer. Use CSS to arrange them vertically using basic display properties.",
            "difficulty": "easy",
            "hints": [
              "Use display: block for vertical stacking",
              "Test layout in DevTools"
            ],
            "solution": "HTML: <header>Header</header><main>Main</main><footer>Footer</footer>\nCSS: header, main, footer { display: block; padding: 10px; }"
          }
        ],
        "quiz": [
          {
            "question": "Which CSS property is used to define a Flexbox layout?",
            "options": [
              "display: block",
              "display: flex",
              "display: grid",
              "display: inline"
            ],
            "correctOption": [1]
          },
          {
            "question": "What is the primary benefit of modern CSS layouts?",
            "options": [
              "Faster rendering",
              "Easier animations",
              "Flexible positioning",
              "Smaller file size"
            ],
            "correctOption": [2]
          }
        ],
        "estimatedTime": 30,
        "resources": [
          {
            "title": "MDN — CSS Layout Introduction",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Introduction",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "CSS Flexbox is a one-dimensional layout system for arranging elements in rows or columns, ideal for navigation bars, card layouts, and centered content. Key properties include `display: flex`, `flex-direction`, `justify-content`, and `align-items`. This lesson covers how to use Flexbox to create flexible, responsive layouts, handle spacing with `gap`, and align items precisely. You’ll learn to build common UI components and debug Flexbox layouts using DevTools, ensuring adaptability across screen sizes.",
        "examples": [
          ".container { display: flex; flex-direction: row; justify-content: space-between; }",
          ".card { flex: 1; margin: 10px; }"
        ],
        "realWorldApplication": "Flexbox is used for responsive navigation menus, card grids, and centered hero sections in modern websites.",
        "expertInsights": "Use `gap` for spacing instead of margins for cleaner code. Test Flexbox layouts with `flex-wrap` to ensure responsiveness.",
        "commonMistakes": [
          "Forgetting `flex-wrap`, causing overflow on smaller screens.",
          "Misusing `justify-content` vs. `align-items` for alignment."
        ],
        "exercises": [
          {
            "title": "Build a Flexbox Navigation Bar",
            "prompt": "Create a horizontal navigation bar using Flexbox, with evenly spaced links that wrap on smaller screens.",
            "difficulty": "medium",
            "hints": [
              "Use flex-direction: row and flex-wrap: wrap",
              "Apply justify-content: space-between"
            ],
            "solution": "HTML: <nav class=\"nav\"><a href=\"#\">Link 1</a><a href=\"#\">Link 2</a></nav>\nCSS: .nav { display: flex; flex-direction: row; flex-wrap: wrap; justify-content: space-between; gap: 10px; }"
          }
        ],
        "quiz": [
          {
            "question": "Which Flexbox property controls the main axis alignment?",
            "options": [
              "align-items",
              "justify-content",
              "flex-direction",
              "flex-wrap"
            ],
            "correctOption": [1]
          },
          {
            "question": "What does flex-wrap: wrap do?",
            "options": [
              "Stacks items vertically",
              "Allows items to wrap to new lines",
              "Centers items",
              "Shrinks items"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 45,
        "resources": [
          {
            "title": "MDN — CSS Flexbox Guide",
            "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "CSS Grid is a two-dimensional layout system for creating complex layouts with rows and columns. Properties like `grid-template-columns`, `grid-template-rows`, and `grid-area` offer precise control over layout structure. This lesson covers how to define grids, place items with `grid-column` and `grid-row`, and create responsive layouts with `auto-fit` and `minmax`. You’ll learn to build grid-based designs, such as dashboards, and debug them using DevTools’ grid inspector for accuracy.",
        "examples": [
          ".grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; }",
          ".item { grid-column: 1 / 3; grid-row: 1 / 2; }"
        ],
        "realWorldApplication": "Grid is used for complex layouts like photo galleries, dashboards, and magazine-style pages requiring precise placement.",
        "expertInsights": "Use `auto-fit` with `minmax` for responsive grids. Leverage DevTools’ grid overlay to visualize and adjust layouts quickly.",
        "commonMistakes": [
          "Overcomplicating grids with too many explicit tracks.",
          "Not testing grid layouts on smaller screens."
        ],
        "exercises": [
          {
            "title": "Create a Grid Layout",
            "prompt": "Build a 3x2 grid layout for cards using CSS Grid, with equal column widths and a fixed gap.",
            "difficulty": "medium",
            "hints": [
              "Use grid-template-columns: repeat(3, 1fr)",
              "Add gap for spacing"
            ],
            "solution": ".grid { display: grid; grid-template-columns: repeat(3, 1fr); grid-template-rows: repeat(2, auto); gap: 15px; }"
          }
        ],
        "quiz": [
          {
            "question": "Which property defines the number of columns in a grid?",
            "options": [
              "grid-template-rows",
              "grid-template-columns",
              "grid-gap",
              "grid-area"
            ],
            "correctOption": [1]
          },
          {
            "question": "What does repeat(auto-fit, minmax(100px, 1fr)) do?",
            "options": [
              "Fixed columns",
              "Responsive columns",
              "Fixed rows",
              "Equal gaps"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 50,
        "resources": [
          {
            "title": "MDN — CSS Grid Layout",
            "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "CSS media queries enable responsive design by applying styles based on device characteristics, like screen width or orientation. Using `@media` rules, you can adapt layouts for mobile, tablet, or desktop displays. This lesson covers writing media queries, using breakpoints (e.g., `max-width: 768px`), and applying mobile-first or desktop-first strategies. You’ll learn to create responsive layouts that adjust dynamically and test them across devices using browser DevTools.",
        "examples": [
          "@media (max-width: 600px) { .container { flex-direction: column; } }",
          "@media (min-width: 768px) { .sidebar { width: 200px; } }"
        ],
        "realWorldApplication": "Media queries are used to adapt websites for smartphones, tablets, and desktops, ensuring usability across all devices.",
        "expertInsights": "Adopt a mobile-first approach (use `min-width`) for simpler CSS. Define common breakpoints (e.g., 576px, 768px) but test on real devices.",
        "commonMistakes": [
          "Using too many breakpoints, complicating maintenance.",
          "Not testing media queries on actual devices or emulators."
        ],
        "exercises": [
          {
            "title": "Create a Responsive Layout",
            "prompt": "Style a page with a Flexbox row layout that switches to a column layout on screens smaller than 600px using a media query.",
            "difficulty": "medium",
            "hints": [
              "Use @media (max-width: 600px)",
              "Change flex-direction to column"
            ],
            "solution": ".container { display: flex; flex-direction: row; } @media (max-width: 600px) { .container { flex-direction: column; } }"
          }
        ],
        "quiz": [
          {
            "question": "What does a max-width media query target?",
            "options": [
              "Larger screens",
              "Smaller screens",
              "Fixed widths",
              "All screens"
            ],
            "correctOption": [1]
          },
          {
            "question": "What is a mobile-first approach?",
            "options": [
              "Using max-width",
              "Using min-width",
              "Fixed layouts",
              "No media queries"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 45,
        "resources": [
          {
            "title": "MDN — Using Media Queries",
            "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Responsive design patterns, like fluid grids, flexible images, and mobile-first layouts, ensure websites adapt seamlessly to different devices. Patterns include percentage-based widths, `max-width` for images, and viewport units (e.g., `vw`, `vh`). This lesson covers common patterns, such as card layouts and navigation toggles, and how to combine them with Flexbox, Grid, and media queries. You’ll learn to prioritize accessibility and performance in responsive designs, testing patterns across devices for usability.",
        "examples": [
          "img { max-width: 100%; height: auto; }",
          ".grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); }"
        ],
        "realWorldApplication": "Responsive patterns are used in e-commerce sites, blogs, and portfolios to ensure content is accessible and visually appealing on all devices.",
        "expertInsights": "Use fluid grids with `minmax` for scalability. Ensure images are responsive with `max-width: 100%` and test for accessibility with screen readers.",
        "commonMistakes": [
          "Using fixed pixel widths, breaking responsiveness.",
          "Forgetting to test images for proper scaling on mobile."
        ],
        "exercises": [
          {
            "title": "Build a Fluid Grid",
            "prompt": "Create a responsive card grid using CSS Grid with auto-fit and minmax, ensuring cards scale on different screen sizes.",
            "difficulty": "medium",
            "hints": [
              "Use repeat(auto-fit, minmax(200px, 1fr))",
              "Add max-width: 100% to images"
            ],
            "solution": ".grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; } img { max-width: 100%; height: auto; }"
          }
        ],
        "quiz": [
          {
            "question": "What makes images responsive?",
            "options": [
              "width: 100%",
              "max-width: 100%",
              "height: 100%",
              "fixed width"
            ],
            "correctOption": [1]
          },
          {
            "question": "What does minmax(200px, 1fr) do in a grid?",
            "options": [
              "Fixed 200px columns",
              "Flexible columns with minimum 200px",
              "Equal columns",
              "Maximum 200px"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 50,
        "resources": [
          {
            "title": "CSS Tricks — Responsive Design Patterns",
            "url": "https://css-tricks.com/responsive-web-design/",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Building and deploying a responsive layout combines Flexbox, Grid, media queries, and responsive patterns to create a fully adaptive web page. This lesson guides you through designing a responsive interface, testing it across devices with DevTools, and deploying it using Git and platforms like GitHub Pages or Vercel. You’ll learn to organize CSS for maintainability, ensure accessibility, and optimize performance for fast-loading, user-friendly designs.",
        "examples": [
          ".container { display: flex; flex-wrap: wrap; } @media (max-width: 768px) { .container { flex-direction: column; } }",
          "Deploy a responsive page to Vercel with Git for continuous updates."
        ],
        "realWorldApplication": "Responsive layouts are critical for portfolios, landing pages, and e-commerce sites, ensuring usability across all devices.",
        "expertInsights": "Use a mobile-first approach with `min-width` media queries. Test performance with DevTools’ Lighthouse and ensure accessibility with ARIA landmarks.",
        "commonMistakes": [
          "Not testing responsiveness on real devices.",
          "Pushing unoptimized CSS or images, slowing load times."
        ],
        "exercises": [
          {
            "title": "Build and Deploy a Responsive Page",
            "prompt": "Create a responsive page with a Flexbox navigation and Grid-based content area, using media queries for mobile. Deploy it using GitHub Pages.",
            "difficulty": "medium",
            "hints": [
              "Use min-width media queries",
              "Commit changes with clear Git messages"
            ],
            "solution": "CSS: .nav { display: flex; flex-wrap: wrap; gap: 10px; } .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); } @media (max-width: 600px) { .nav { flex-direction: column; } }\nGit: git add ., git commit -m 'Responsive layout', git push, enable GitHub Pages."
          }
        ],
        "quiz": [
          {
            "question": "Which Git command commits staged changes?",
            "options": ["git add", "git commit", "git push", "git clone"],
            "correctOption": [1]
          },
          {
            "question": "What ensures layouts adapt to screen sizes?",
            "options": [
              "Fixed widths",
              "Media queries",
              "Static images",
              "High specificity"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 75,
        "resources": [
          {
            "title": "GitHub Pages Documentation",
            "url": "https://docs.github.com/en/pages",
            "type": "doc"
          },
          {
            "title": "Vercel — Deploying Static Sites",
            "url": "https://vercel.com/docs/platform/deployments",
            "type": "doc"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "meta": {
      "generatedAt": "2025-09-16T00:00:00.000Z",
      "version": "1.0"
    }
  },
  {
    "domains": [
      {
        "name": "Web Development",
        "slug": "web-development",
        "description": "Explore the fundamentals of JavaScript, the programming language of the web, focusing on its syntax, data types, development tools, and console usage for dynamic web applications.",
        "courseCount": 1,
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "courses": [
      {
        "title": "JavaScript Basics: Getting Started with JS",
        "slug": "js-basics-getting-started",
        "shortDescription": "A beginner-friendly course on JavaScript, covering its role, syntax, data types, development tools, and console usage to build interactive web pages.",
        "longDescription": "This course introduces JavaScript (JS), the programming language that powers dynamic and interactive web experiences. You’ll learn what JavaScript is, how it integrates with HTML and CSS, and how to use browser DevTools and the console for debugging. The course covers JS syntax, variables, data types (e.g., strings, numbers, booleans), and basic operations. Through hands-on exercises, real-world examples, and quizzes, you’ll write and debug simple JavaScript code, gaining the skills to manipulate web content and prepare for more advanced programming concepts.",
        "tags": [
          "javascript",
          "web",
          "syntax",
          "devtools",
          "beginner",
          "frontend"
        ],
        "thumbnail": "https://example.com/thumbnails/js-basics.jpg",

        "levelSummary": [
          {
            "level": "Beginner",
            "overview": "Learn JavaScript basics, including syntax, data types, and how to use DevTools and the console for web development.",
            "moduleCount": 1
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "modules": [
      {
        "title": "Module 1 — JavaScript Fundamentals and Environment",
        "slug": "js-fundamentals-environment",
        "description": "Master the basics of JavaScript, including its role, syntax, data types, and how to use browser DevTools and the console for development.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "lessons": [
      {
        "title": "What is JavaScript?",
        "slug": "what-is-javascript",
        "description": "Understand the role of JavaScript in web development and how it adds interactivity to web pages.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Setting Up the JavaScript Environment",
        "slug": "js-environment-setup",
        "description": "Learn how to set up a JavaScript development environment using browser DevTools and code editors.",

        "order": 2,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Using the Browser Console",
        "slug": "browser-console",
        "description": "Explore the browser console for running and debugging JavaScript code.",

        "order": 3,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "JavaScript Syntax and Variables",
        "slug": "js-syntax-variables",
        "description": "Master JavaScript syntax, including variables, declarations, and basic operations.",

        "order": 4,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "JavaScript Data Types",
        "slug": "js-data-types",
        "description": "Understand JavaScript data types like strings, numbers, booleans, and their usage in web development.",

        "order": 5,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Writing and Deploying Your First JavaScript",
        "slug": "first-js-deploy",
        "description": "Write a simple JavaScript program and deploy it within an HTML page using Git and hosting platforms.",

        "order": 6,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "learningContents": [
      {
        "explanation": "JavaScript (JS) is a versatile, high-level programming language that adds interactivity and dynamic behavior to web pages. It runs in browsers, manipulating HTML and CSS via the Document Object Model (DOM) and handling user events like clicks or form submissions. JavaScript can also run on servers (e.g., Node.js) and power web applications like social media platforms. This lesson covers JavaScript’s history, its role in the web ecosystem, how it complements HTML and CSS, and its client-side execution in browsers. You’ll learn why JavaScript is essential for modern web development and how it enables dynamic user experiences.",
        "examples": [
          "<script>alert('Hello, World!');</script>",
          "A button that changes text when clicked using JavaScript."
        ],
        "realWorldApplication": "JavaScript powers interactive features like form validation, dynamic content updates, and single-page applications like Gmail or Twitter.",
        "expertInsights": "Understand JavaScript’s role in the DOM to manipulate web content effectively. Start with simple scripts in the browser to build confidence before exploring frameworks.",
        "commonMistakes": [
          "Confusing JavaScript with Java, a different language.",
          "Assuming JavaScript only runs in browsers, ignoring server-side uses."
        ],
        "exercises": [
          {
            "title": "Write a Simple Script",
            "prompt": "Create an HTML page with a JavaScript alert that displays 'Welcome to JavaScript!' when loaded.",
            "difficulty": "easy",
            "hints": ["Use the <script> tag", "Use the alert() function"],
            "solution": "<!DOCTYPE html><html><body><script>alert('Welcome to JavaScript!');</script></body></html>"
          }
        ],
        "quiz": [
          {
            "question": "What is JavaScript primarily used for in web development?",
            "options": [
              "Styling",
              "Interactivity",
              "Structuring content",
              "Server hosting"
            ],
            "correctOption": [1]
          },
          {
            "question": "Where does JavaScript typically run?",
            "options": [
              "Server only",
              "Browser only",
              "Browser and server",
              "Database"
            ],
            "correctOption": [2]
          }
        ],
        "estimatedTime": 30,
        "resources": [
          {
            "title": "MDN — What is JavaScript?",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Setting up a JavaScript development environment involves using a code editor (e.g., VS Code) and browser DevTools for writing, running, and debugging code. JavaScript can be embedded in HTML using `<script>` tags, linked externally, or run directly in the browser console. This lesson covers how to set up a local development environment, integrate JavaScript with HTML, and use DevTools to test scripts. You’ll learn to create a simple project structure and prepare for writing JavaScript effectively.",
        "examples": [
          "<script src=\"script.js\"></script>",
          "Writing console.log('Test') in VS Code and running it in the browser."
        ],
        "realWorldApplication": "A proper development environment is crucial for writing, testing, and debugging JavaScript in web projects like interactive forms or games.",
        "expertInsights": "Use VS Code with extensions like Live Server for instant previews. Always test scripts in multiple browsers to ensure compatibility.",
        "commonMistakes": [
          "Incorrectly linking external JavaScript files, causing scripts not to run.",
          "Not checking browser compatibility for new JavaScript features."
        ],
        "exercises": [
          {
            "title": "Set Up a JavaScript Project",
            "prompt": "Create an HTML file linked to an external JavaScript file that logs 'Hello, JS!' to the console.",
            "difficulty": "easy",
            "hints": [
              "Use <script src=\"script.js\">",
              "Write console.log in the JS file"
            ],
            "solution": "HTML: <!DOCTYPE html><html><body><script src=\"script.js\"></script></body></html>\nJS: console.log('Hello, JS!');"
          }
        ],
        "quiz": [
          {
            "question": "How do you link an external JavaScript file?",
            "options": ["<link>", "<script>", "<style>", "<js>"],
            "correctOption": [1]
          },
          {
            "question": "Which editor is commonly used for JavaScript?",
            "options": ["Notepad", "VS Code", "Photoshop", "Excel"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 35,
        "resources": [
          {
            "title": "MDN — Setting Up JavaScript",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "The browser console, accessible via DevTools, is a powerful tool for running, testing, and debugging JavaScript code. It allows you to log messages, inspect variables, and catch errors in real-time. This lesson covers how to open the console, use functions like `console.log()`, `console.error()`, and `console.table()`, and debug simple scripts. You’ll learn to identify and fix common JavaScript errors, improving your ability to troubleshoot code effectively.",
        "examples": [
          "console.log('Debugging message');",
          "console.error('Something went wrong!');"
        ],
        "realWorldApplication": "The console is used to debug interactive features like form validation or dynamic content updates in web applications.",
        "expertInsights": "Use `console.table()` for structured data and `console.group()` to organize logs. Always check the console for errors during development.",
        "commonMistakes": [
          "Ignoring console errors, leading to undetected bugs.",
          "Logging excessive data, cluttering the console."
        ],
        "exercises": [
          {
            "title": "Log to the Console",
            "prompt": "Write a JavaScript script that logs a message, an error, and a variable’s value to the console.",
            "difficulty": "easy",
            "hints": [
              "Use console.log() and console.error()",
              "Test in browser DevTools"
            ],
            "solution": "let message = 'Test'; console.log('Starting...'); console.error('Error occurred'); console.log(message);"
          }
        ],
        "quiz": [
          {
            "question": "Which console method logs an error?",
            "options": [
              "console.log",
              "console.warn",
              "console.error",
              "console.info"
            ],
            "correctOption": [2]
          },
          {
            "question": "Where do you access the console?",
            "options": ["Text editor", "DevTools", "Server", "Database"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 40,
        "resources": [
          {
            "title": "MDN — Console API",
            "url": "https://developer.mozilla.org/en-US/docs/Web/API/Console_API",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "JavaScript syntax defines how code is written, including variables, operators, and statements. Variables are declared using `let`, `const`, or `var`, storing data for manipulation. This lesson covers basic syntax rules, variable declarations, scope (global vs. local), and simple operations like arithmetic and string concatenation. You’ll learn to write clean, error-free JavaScript code and understand how variables interact with the DOM for basic web interactivity.",
        "examples": [
          "let name = 'Alice'; console.log('Hello, ' + name);",
          "const age = 25; let sum = age + 5;"
        ],
        "realWorldApplication": "Variables and syntax are used to store user input, perform calculations, and update web content dynamically, like in forms or counters.",
        "expertInsights": "Use `const` for values that won’t change and `let` for variables that will. Avoid `var` due to its outdated scoping rules.",
        "commonMistakes": [
          "Using undeclared variables, causing reference errors.",
          "Misusing `var`, leading to scope-related bugs."
        ],
        "exercises": [
          {
            "title": "Declare and Use Variables",
            "prompt": "Write a JavaScript script that declares a constant for a name and a variable for age, then logs a message combining both.",
            "difficulty": "easy",
            "hints": [
              "Use const for name, let for age",
              "Use string concatenation or template literals"
            ],
            "solution": "const name = 'Alice'; let age = 25; console.log(`Hello, ${name}, you are ${age} years old.`);"
          }
        ],
        "quiz": [
          {
            "question": "Which keyword declares a constant variable?",
            "options": ["let", "var", "const", "static"],
            "correctOption": [2]
          },
          {
            "question": "What is the result of '5' + 5 in JavaScript?",
            "options": ["10", "55", "Error", "25"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 50,
        "resources": [
          {
            "title": "MDN — JavaScript Syntax",
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "JavaScript supports several data types, including strings, numbers, booleans, arrays, objects, null, and undefined. Each type has specific behaviors and use cases, like strings for text or objects for structured data. This lesson covers the characteristics of each type, type coercion, and how to check types using `typeof`. You’ll learn to manipulate data types in scripts and avoid common pitfalls like unexpected type conversions, enabling robust web interactions.",
        "examples": [
          "let str = 'Hello'; let num = 42; let bool = true;",
          "let obj = { name: 'Alice', age: 25 }; console.log(obj.name);"
        ],
        "realWorldApplication": "Data types are used to store and manipulate user data, like form inputs or API responses, in web applications.",
        "expertInsights": "Always check types with `typeof` to avoid coercion errors. Use strict equality (`===`) to prevent unexpected type conversions.",
        "commonMistakes": [
          "Using == instead of ===, causing type coercion issues.",
          "Confusing null and undefined, leading to logic errors."
        ],
        "exercises": [
          {
            "title": "Work with Data Types",
            "prompt": "Write a script that declares a string, number, and object, then logs their types and a combined message.",
            "difficulty": "medium",
            "hints": [
              "Use typeof to check types",
              "Access object properties with dot notation"
            ],
            "solution": "let str = 'Hello'; let num = 42; let obj = { key: 'value' }; console.log(typeof str, typeof num, typeof obj); console.log(`${str} ${num} ${obj.key}`);"
          }
        ],
        "quiz": [
          {
            "question": "What is the type of null in JavaScript?",
            "options": ["null", "undefined", "object", "string"],
            "correctOption": [2]
          },
          {
            "question": "Which operator checks type and value equality?",
            "options": ["==", "===", "=", "!="],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 45,
        "resources": [
          {
            "title": "MDN — JavaScript Data Types",
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Writing and deploying your first JavaScript program involves creating a script, integrating it with HTML, and publishing it online. This lesson guides you through writing a simple JavaScript program (e.g., updating page content), using Git for version control, and deploying it with platforms like GitHub Pages or Vercel. You’ll learn to test your script in DevTools, ensure it works across browsers, and maintain clean code with proper project organization.",
        "examples": [
          "<script>document.querySelector('h1').textContent = 'Hello, JS!';</script>",
          "Deploy an HTML page with JavaScript to GitHub Pages."
        ],
        "realWorldApplication": "Deploying JavaScript enables interactive features in portfolios, landing pages, or small web apps, showcasing your coding skills.",
        "expertInsights": "Keep scripts modular in external files. Use meaningful Git commit messages and test JavaScript functionality before deployment.",
        "commonMistakes": [
          "Not testing scripts in multiple browsers, causing compatibility issues.",
          "Pushing sensitive data to public Git repositories."
        ],
        "exercises": [
          {
            "title": "Deploy a JavaScript Page",
            "prompt": "Write a JavaScript script to update an HTML heading’s text, then deploy the page using GitHub Pages.",
            "difficulty": "medium",
            "hints": [
              "Use document.querySelector()",
              "Commit changes with git add/commit/push"
            ],
            "solution": "HTML: <h1>Original</h1><script src=\"script.js\"></script>\nJS: document.querySelector('h1').textContent = 'Updated!';\nGit: git add ., git commit -m 'Added JS script', git push, enable GitHub Pages."
          }
        ],
        "quiz": [
          {
            "question": "Which method updates an element’s text?",
            "options": ["textContent", "innerHTML", "style", "className"],
            "correctOption": [0]
          },
          {
            "question": "Which platform supports static site deployment?",
            "options": ["MySQL", "Vercel", "MongoDB", "Redis"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 60,
        "resources": [
          {
            "title": "GitHub Pages Documentation",
            "url": "https://docs.github.com/en/pages",
            "type": "doc"
          },
          {
            "title": "Vercel — Deploying Static Sites",
            "url": "https://vercel.com/docs/platform/deployments",
            "type": "doc"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "meta": {
      "generatedAt": "2025-09-16T00:00:00.000Z",
      "version": "1.0"
    }
  },
  {
    "domains": [
      {
        "name": "Web Development",
        "slug": "web-development",
        "description": "Master JavaScript control flow and operators, including if/else statements, loops, and comparison operators, to create dynamic and logical web applications.",
        "courseCount": 1,
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "courses": [
      {
        "title": "JavaScript Control Flow & Operators: Building Logic",
        "slug": "js-control-flow-operators",
        "shortDescription": "A beginner-to-intermediate course on JavaScript control flow, covering if/else statements, loops, and comparison operators for dynamic web logic.",
        "longDescription": "This course dives into JavaScript control flow and operators, essential for creating logic-driven web applications. You’ll learn to use if/else statements for conditional logic, loops (for, while) for repetitive tasks, and comparison operators to evaluate conditions. Through hands-on exercises, real-world examples, and quizzes, you’ll build interactive scripts, such as form validation and dynamic content generation. The course also covers debugging logical errors in DevTools and deploying scripts, preparing you to handle decision-making and iteration in JavaScript effectively.",
        "tags": [
          "javascript",
          "web",
          "control-flow",
          "operators",
          "beginner",
          "frontend"
        ],
        "thumbnail": "https://example.com/thumbnails/js-control-flow.jpg",

        "levelSummary": [
          {
            "level": "Beginner to Intermediate",
            "overview": "Learn JavaScript control flow and operators to build logical, interactive web applications.",
            "moduleCount": 1
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "modules": [
      {
        "title": "Module 1 — Control Flow and Operators in JavaScript",
        "slug": "js-control-flow-operators",
        "description": "Explore JavaScript control flow with if/else, loops, and comparison operators to create dynamic and logical web interactions.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "lessons": [
      {
        "title": "Introduction to Control Flow",
        "slug": "intro-control-flow",
        "description": "Understand how control flow directs the execution of JavaScript code using conditional statements and loops.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Comparison Operators",
        "slug": "comparison-operators",
        "description": "Learn to use comparison operators to evaluate conditions in JavaScript for logical decision-making.",

        "order": 2,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "If/Else Statements",
        "slug": "if-else-statements",
        "description": "Master if/else statements to implement conditional logic in JavaScript applications.",

        "order": 3,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Loops in JavaScript",
        "slug": "js-loops",
        "description": "Explore for, while, and do-while loops to handle repetitive tasks in JavaScript.",

        "order": 4,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Debugging Control Flow",
        "slug": "debugging-control-flow",
        "description": "Use DevTools to debug issues in control flow and operator logic for robust JavaScript code.",

        "order": 5,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Building and Deploying a Logical Script",
        "slug": "logical-script-deploy",
        "description": "Write a JavaScript script with control flow and operators, then deploy it within an HTML page using Git.",

        "order": 6,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "learningContents": [
      {
        "explanation": "Control flow in JavaScript determines the order in which code executes, using conditionals (if/else) and loops (for, while) to handle decisions and repetition. It enables dynamic behavior, like responding to user input or iterating over data. This lesson introduces control flow concepts, how they integrate with the DOM for web interactivity, and their role in building logical applications. You’ll learn the basics of branching and looping, setting the stage for creating responsive and interactive JavaScript programs.",
        "examples": [
          "if (score > 50) { console.log('Pass'); } else { console.log('Fail'); }",
          "for (let i = 0; i < 5; i++) { console.log(i); }"
        ],
        "realWorldApplication": "Control flow is used in form validation, game logic, and dynamic content rendering in web applications like e-commerce filters or quizzes.",
        "expertInsights": "Plan control flow logic before coding to avoid nested complexity. Use clear conditions and loops to improve code readability.",
        "commonMistakes": [
          "Writing overly complex conditionals, making code hard to maintain.",
          "Forgetting to update loop counters, causing infinite loops."
        ],
        "exercises": [
          {
            "title": "Basic Conditional Logic",
            "prompt": "Write a script that logs 'Adult' if a variable age is 18 or higher, otherwise logs 'Minor'.",
            "difficulty": "easy",
            "hints": ["Use an if/else statement", "Compare the age variable"],
            "solution": "let age = 20; if (age >= 18) { console.log('Adult'); } else { console.log('Minor'); }"
          }
        ],
        "quiz": [
          {
            "question": "What does control flow determine in JavaScript?",
            "options": [
              "Code styling",
              "Execution order",
              "Data types",
              "DOM structure"
            ],
            "correctOption": [1]
          },
          {
            "question": "Which statement is used for conditional logic?",
            "options": ["for", "if", "while", "switch"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 30,
        "resources": [
          {
            "title": "MDN — Control Flow and Error Handling",
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Comparison operators in JavaScript (`==`, `===`, `!=`, `!==`, `>`, `<`, etc.) evaluate conditions, returning true or false. They’re used in conditionals and loops to make decisions. Strict equality (`===`) checks both value and type, while loose equality (`==`) allows type coercion. This lesson covers all comparison operators, their use cases, and how to avoid coercion pitfalls. You’ll learn to write reliable conditions for dynamic web logic, testing them in the console for accuracy.",
        "examples": ["5 === '5' // false (different types)", "10 > 5 // true"],
        "realWorldApplication": "Comparison operators are used in form validation, user authentication, and filtering data in web applications.",
        "expertInsights": "Always use `===` over `==` to avoid unexpected coercion. Test edge cases, like comparing null or undefined, to ensure robust logic.",
        "commonMistakes": [
          "Using `==` instead of `===`, causing type coercion errors.",
          "Confusing `>` with `>=`, leading to incorrect comparisons."
        ],
        "exercises": [
          {
            "title": "Use Comparison Operators",
            "prompt": "Write a script that compares two numbers and logs 'Equal' if they are strictly equal, otherwise logs 'Not equal'.",
            "difficulty": "easy",
            "hints": [
              "Use === for strict equality",
              "Test with different types"
            ],
            "solution": "let a = 5; let b = '5'; if (a === b) { console.log('Equal'); } else { console.log('Not equal'); }"
          }
        ],
        "quiz": [
          {
            "question": "What does === check?",
            "options": [
              "Value only",
              "Type only",
              "Value and type",
              "Reference only"
            ],
            "correctOption": [2]
          },
          {
            "question": "What is the result of 5 != '5'?",
            "options": ["true", "false", "Error", "undefined"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 35,
        "resources": [
          {
            "title": "MDN — Comparison Operators",
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "If/else statements in JavaScript allow conditional execution of code based on whether a condition is true or false. You can chain multiple conditions using `else if` or use nested statements for complex logic. This lesson covers the syntax of if/else, combining them with comparison operators, and writing clean conditional logic. You’ll learn to implement decision-making in scripts, such as showing different content based on user input, and test conditions in DevTools.",
        "examples": [
          "if (score >= 90) { console.log('A'); } else if (score >= 80) { console.log('B'); } else { console.log('C'); }",
          "let isLoggedIn = true; if (isLoggedIn) { console.log('Welcome!'); }"
        ],
        "realWorldApplication": "If/else is used for user authentication, displaying conditional UI elements, and handling form submissions in web apps.",
        "expertInsights": "Keep if/else statements concise to avoid nesting hell. Consider using switch statements or objects for complex conditionals.",
        "commonMistakes": [
          "Forgetting curly braces, causing scope issues.",
          "Writing redundant conditions, bloating code."
        ],
        "exercises": [
          {
            "title": "Conditional Grading",
            "prompt": "Write a script that logs a letter grade (A, B, C) based on a score variable using if/else.",
            "difficulty": "medium",
            "hints": [
              "Use else if for multiple conditions",
              "Test with different score values"
            ],
            "solution": "let score = 85; if (score >= 90) { console.log('A'); } else if (score >= 80) { console.log('B'); } else { console.log('C'); }"
          }
        ],
        "quiz": [
          {
            "question": "What happens if no condition in an if/else chain is true?",
            "options": [
              "Error",
              "Else block runs",
              "Script stops",
              "First block runs"
            ],
            "correctOption": [1]
          },
          {
            "question": "Which keyword adds additional conditions?",
            "options": ["if", "else", "else if", "switch"],
            "correctOption": [2]
          }
        ],
        "estimatedTime": 45,
        "resources": [
          {
            "title": "MDN — If...Else",
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Loops in JavaScript, such as `for`, `while`, and `do-while`, allow repetitive execution of code, ideal for iterating over data or performing repeated tasks. `for` loops are great for known iterations, while `while` loops handle dynamic conditions. This lesson covers loop syntax, controlling loops with `break` and `continue`, and avoiding infinite loops. You’ll learn to use loops for tasks like generating lists or processing user input, testing them in the console for accuracy.",
        "examples": [
          "for (let i = 0; i < 5; i++) { console.log(i); }",
          "let i = 0; while (i < 3) { console.log(i); i++; }"
        ],
        "realWorldApplication": "Loops are used to render lists (e.g., product cards), process arrays from APIs, and automate repetitive tasks in web apps.",
        "expertInsights": "Use `for...of` for arrays and `for...in` for objects when appropriate. Always ensure a loop’s exit condition is reachable to avoid crashes.",
        "commonMistakes": [
          "Creating infinite loops by forgetting to update counters.",
          "Using incorrect loop types for the task, reducing efficiency."
        ],
        "exercises": [
          {
            "title": "Loop Through Numbers",
            "prompt": "Write a for loop that logs numbers 1 to 5 to the console.",
            "difficulty": "easy",
            "hints": ["Use a for loop with i++", "Start at 1, end at 5"],
            "solution": "for (let i = 1; i <= 5; i++) { console.log(i); }"
          }
        ],
        "quiz": [
          {
            "question": "Which loop runs at least once?",
            "options": ["for", "while", "do-while", "for...of"],
            "correctOption": [2]
          },
          {
            "question": "What stops a loop early?",
            "options": ["return", "break", "continue", "exit"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 50,
        "resources": [
          {
            "title": "MDN — Loops and Iteration",
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Debugging control flow in JavaScript involves identifying and fixing logical errors in conditionals and loops using browser DevTools. Breakpoints, console logs, and step-through debugging help trace code execution. This lesson covers how to set breakpoints, inspect variables, and catch errors like infinite loops or incorrect conditions. You’ll learn to debug scripts effectively, ensuring your control flow logic works as intended for dynamic web applications.",
        "examples": [
          "Debugging: for (let i = 0; i < 5; i++) { console.log(i); } // Check loop execution",
          "Set a breakpoint on an if condition to inspect variable values."
        ],
        "realWorldApplication": "Debugging is critical for fixing issues in form validation, data processing, and interactive features in web applications.",
        "expertInsights": "Use DevTools’ Sources panel to set breakpoints and step through code. Log intermediate values to trace logic errors quickly.",
        "commonMistakes": [
          "Ignoring console errors, missing critical bugs.",
          "Not using breakpoints, making debugging harder."
        ],
        "exercises": [
          {
            "title": "Debug a Loop",
            "prompt": "Write a loop that logs numbers 1 to 10 but has an error causing it to skip numbers. Use DevTools to fix it.",
            "difficulty": "medium",
            "hints": [
              "Check the loop increment",
              "Use console.log to trace values"
            ],
            "solution": "for (let i = 1; i <= 10; i++) { console.log(i); } // Fixed incorrect increment"
          }
        ],
        "quiz": [
          {
            "question": "What DevTools feature pauses code execution?",
            "options": ["Console", "Breakpoint", "Network", "Sources"],
            "correctOption": [1]
          },
          {
            "question": "What causes an infinite loop?",
            "options": [
              "Missing condition",
              "Incorrect counter update",
              "No variables",
              "Too many loops"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 45,
        "resources": [
          {
            "title": "MDN — Debugging JavaScript",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/How_to_debug",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Building and deploying a JavaScript script with control flow and operators involves creating logic-driven code, integrating it with HTML, and publishing it online. This lesson guides you through writing a script with if/else and loops (e.g., a simple counter or validator), using Git for version control, and deploying it with platforms like GitHub Pages or Vercel. You’ll learn to test logic in DevTools, ensure cross-browser compatibility, and maintain clean code for scalability.",
        "examples": [
          "<script>let num = 10; if (num > 5) { document.querySelector('p').textContent = 'High'; }</script>",
          "Deploy a page with a loop-based list generator to GitHub Pages."
        ],
        "realWorldApplication": "Logical scripts power interactive features like quizzes, counters, and form validations in web apps, enhancing user engagement.",
        "expertInsights": "Organize scripts in external files and use descriptive Git commits. Test logic thoroughly in DevTools before deployment to avoid runtime errors.",
        "commonMistakes": [
          "Deploying untested scripts, causing logical errors.",
          "Not handling edge cases in conditionals or loops."
        ],
        "exercises": [
          {
            "title": "Deploy a Logical Script",
            "prompt": "Write a script that uses a loop and if/else to display numbers 1-5 as a list in HTML, then deploy it using GitHub Pages.",
            "difficulty": "medium",
            "hints": [
              "Use a for loop to generate list items",
              "Test in DevTools before deploying"
            ],
            "solution": "HTML: <ul id=\"list\"></ul><script src=\"script.js\"></script>\nJS: for (let i = 1; i <= 5; i++) { let li = document.createElement('li'); li.textContent = i; document.querySelector('#list').appendChild(li); }\nGit: git add ., git commit -m 'Added logical script', git push, enable GitHub Pages."
          }
        ],
        "quiz": [
          {
            "question": "Which method adds an element to the DOM?",
            "options": [
              "appendChild",
              "textContent",
              "querySelector",
              "createElement"
            ],
            "correctOption": [0]
          },
          {
            "question": "Which platform supports static site deployment?",
            "options": ["MySQL", "Vercel", "MongoDB", "Redis"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 60,
        "resources": [
          {
            "title": "GitHub Pages Documentation",
            "url": "https://docs.github.com/en/pages",
            "type": "doc"
          },
          {
            "title": "Vercel — Deploying Static Sites",
            "url": "https://vercel.com/docs/platform/deployments",
            "type": "doc"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "meta": {
      "generatedAt": "2025-09-16T00:00:00.000Z",
      "version": "1.0"
    }
  },
  {
    "domains": [
      {
        "name": "Web Development",
        "slug": "web-development",
        "description": "Dive into JavaScript functions, scope, and closures to create modular, reusable, and encapsulated code for dynamic web applications.",
        "courseCount": 1,
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "courses": [
      {
        "title": "JavaScript Functions, Scope & Closures: Modular Programming",
        "slug": "js-functions-scope-closures",
        "shortDescription": "A beginner-to-intermediate course on JavaScript functions, scope, and closures, focusing on creating reusable and encapsulated code for web applications.",
        "longDescription": "This course explores JavaScript functions, scope, and closures, essential for writing modular and maintainable code. You’ll learn to define and invoke functions, understand variable scope (global, local, block), and leverage closures for data privacy and advanced functionality. Through hands-on exercises, real-world examples, and quizzes, you’ll build reusable scripts, such as event handlers and counters, while mastering debugging techniques in DevTools. The course also covers deploying functional JavaScript code, preparing you for complex web development tasks and frameworks.",
        "tags": [
          "javascript",
          "web",
          "functions",
          "scope",
          "closures",
          "frontend"
        ],
        "thumbnail": "https://example.com/thumbnails/js-functions-closures.jpg",

        "levelSummary": [
          {
            "level": "Beginner to Intermediate",
            "overview": "Learn JavaScript functions, scope, and closures to build modular, reusable, and encapsulated web applications.",
            "moduleCount": 1
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "modules": [
      {
        "title": "Module 1 — Functions, Scope, and Closures",
        "slug": "js-functions-scope-closures",
        "description": "Master JavaScript functions, variable scope, and closures to create modular and private code for dynamic web interactions.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "lessons": [
      {
        "title": "Introduction to JavaScript Functions",
        "slug": "intro-js-functions",
        "description": "Learn the basics of JavaScript functions, including declaration, invocation, and their role in modular code.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Function Parameters and Return Values",
        "slug": "function-parameters-return",
        "description": "Explore function parameters, default values, and return statements for flexible and reusable code.",

        "order": 2,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Understanding Scope in JavaScript",
        "slug": "js-scope",
        "description": "Master variable scope, including global, local, and block scope, to manage data effectively.",

        "order": 3,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Closures in JavaScript",
        "slug": "js-closures",
        "description": "Learn how closures enable data privacy and persistent state in JavaScript applications.",

        "order": 4,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Debugging Functions and Scope",
        "slug": "debugging-functions-scope",
        "description": "Use DevTools to debug issues with functions, scope, and closures for robust code.",

        "order": 5,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Building and Deploying a Functional Script",
        "slug": "functional-script-deploy",
        "description": "Create a JavaScript script using functions and closures, then deploy it within an HTML page using Git.",

        "order": 6,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "learningContents": [
      {
        "explanation": "Functions in JavaScript are reusable blocks of code that perform specific tasks, promoting modularity and maintainability. They can be declared using function declarations, expressions, or arrow functions. This lesson covers function basics, including declaration, invocation, and their role in organizing code. You’ll learn to write simple functions, integrate them with the DOM for interactivity, and test them in the browser console, setting the foundation for modular JavaScript programming.",
        "examples": [
          "function greet() { console.log('Hello!'); } greet();",
          "const add = (a, b) => a + b;"
        ],
        "realWorldApplication": "Functions are used for event handlers, calculations, and reusable logic in web apps, like button clicks or form processing.",
        "expertInsights": "Use descriptive function names for clarity. Prefer arrow functions for concise syntax in callbacks, but understand their `this` behavior.",
        "commonMistakes": [
          "Forgetting to invoke functions, resulting in no execution.",
          "Misplacing function declarations, causing scope issues."
        ],
        "exercises": [
          {
            "title": "Create a Simple Function",
            "prompt": "Write a function that logs 'Welcome!' to the console and invoke it.",
            "difficulty": "easy",
            "hints": [
              "Use function declaration syntax",
              "Call the function after defining it"
            ],
            "solution": "function welcome() { console.log('Welcome!'); } welcome();"
          }
        ],
        "quiz": [
          {
            "question": "Which syntax defines a function expression?",
            "options": [
              "function name() {}",
              "const name = function() {}",
              "name = () => {}",
              "Both b and c"
            ],
            "correctOption": [3]
          },
          {
            "question": "What happens if a function is not invoked?",
            "options": [
              "It runs automatically",
              "It does not run",
              "It throws an error",
              "It logs undefined"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 35,
        "resources": [
          {
            "title": "MDN — Functions",
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Function parameters allow functions to accept inputs, while return values provide outputs for further use. Parameters can have default values, and functions can return any data type. This lesson covers defining parameters, using default values, and returning values to create flexible, reusable functions. You’ll learn to write functions that process inputs (e.g., calculations or DOM updates) and test them in the console for correctness.",
        "examples": [
          "function add(a, b = 0) { return a + b; } console.log(add(5, 3));",
          "const greet = name => `Hello, ${name}!`;"
        ],
        "realWorldApplication": "Parameters and return values are used in form processing, API data manipulation, and reusable utility functions in web apps.",
        "expertInsights": "Use default parameters to handle undefined inputs. Always return values explicitly to avoid `undefined` outputs.",
        "commonMistakes": [
          "Not returning a value, causing unexpected undefined results.",
          "Passing incorrect argument types, leading to logic errors."
        ],
        "exercises": [
          {
            "title": "Function with Parameters",
            "prompt": "Write a function that takes a name parameter and returns a greeting string, then log the result.",
            "difficulty": "easy",
            "hints": ["Use a return statement", "Test with different inputs"],
            "solution": "function greet(name) { return `Hello, ${name}!`; } console.log(greet('Alice'));"
          }
        ],
        "quiz": [
          {
            "question": "What is the default return value of a function?",
            "options": ["null", "undefined", "0", "false"],
            "correctOption": [1]
          },
          {
            "question": "How do you set a default parameter?",
            "options": [
              "param = value",
              "param: value",
              "param => value",
              "param default value"
            ],
            "correctOption": [0]
          }
        ],
        "estimatedTime": 40,
        "resources": [
          {
            "title": "MDN — Function Parameters",
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#function_parameters",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Scope in JavaScript determines where variables are accessible, with global, local (function), and block (e.g., inside `{}`) scopes. `let` and `const` provide block scope, while `var` is function-scoped. This lesson covers scope rules, hoisting, and how to avoid scope-related bugs like variable leaks. You’ll learn to manage variable accessibility in functions and blocks, testing scope behavior in DevTools to ensure predictable code.",
        "examples": [
          "let x = 10; function test() { let x = 20; console.log(x); } test(); // 20",
          "{ const y = 5; } console.log(y); // Error: y is not defined"
        ],
        "realWorldApplication": "Scope is critical for managing data in large applications, preventing conflicts in event handlers or API calls.",
        "expertInsights": "Use `let` and `const` for predictable scoping. Avoid global variables to prevent conflicts in larger projects.",
        "commonMistakes": [
          "Using `var`, causing unexpected variable leaks.",
          "Accessing variables outside their scope, leading to errors."
        ],
        "exercises": [
          {
            "title": "Explore Scope",
            "prompt": "Write a function with a local variable that doesn’t affect a global variable with the same name, then log both.",
            "difficulty": "medium",
            "hints": ["Use let for both variables", "Check scope in DevTools"],
            "solution": "let x = 10; function test() { let x = 20; console.log('Local:', x); } test(); console.log('Global:', x);"
          }
        ],
        "quiz": [
          {
            "question": "Which keyword provides block scope?",
            "options": ["var", "let", "function", "global"],
            "correctOption": [1]
          },
          {
            "question": "What happens when accessing a variable outside its scope?",
            "options": [
              "Returns null",
              "Throws an error",
              "Returns undefined",
              "Uses global value"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 45,
        "resources": [
          {
            "title": "MDN — Scope",
            "url": "https://developer.mozilla.org/en-US/docs/Glossary/Scope",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Closures in JavaScript occur when a function retains access to its outer scope’s variables after the outer function has finished executing. They enable data privacy and state persistence, useful for counters or private data. This lesson covers creating closures, understanding their mechanics, and using them for encapsulation. You’ll learn to build practical closures, like event handlers, and test their behavior in the console for reliability.",
        "examples": [
          "function counter() { let count = 0; return () => count++; } let increment = counter(); console.log(increment()); // 0",
          "function makeAdder(x) { return y => x + y; } let add5 = makeAdder(5); console.log(add5(3)); // 8"
        ],
        "realWorldApplication": "Closures are used in event listeners, module patterns, and state management in frameworks like React.",
        "expertInsights": "Use closures for data privacy instead of global variables. Be mindful of memory usage with long-lived closures.",
        "commonMistakes": [
          "Not understanding closure scope, leading to unexpected variable access.",
          "Creating unnecessary closures, complicating code."
        ],
        "exercises": [
          {
            "title": "Create a Closure",
            "prompt": "Write a function that returns a closure to increment a counter, then call it multiple times and log results.",
            "difficulty": "medium",
            "hints": [
              "Use a function returning another function",
              "Store the counter in the outer function"
            ],
            "solution": "function counter() { let count = 0; return () => count++; } let inc = counter(); console.log(inc()); console.log(inc());"
          }
        ],
        "quiz": [
          {
            "question": "What does a closure retain access to?",
            "options": [
              "Global variables only",
              "Outer function’s variables",
              "DOM elements",
              "Inner function only"
            ],
            "correctOption": [1]
          },
          {
            "question": "What is a common use of closures?",
            "options": [
              "Styling",
              "Data privacy",
              "Loop control",
              "Type checking"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 50,
        "resources": [
          {
            "title": "MDN — Closures",
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Debugging functions, scope, and closures in JavaScript involves identifying issues like incorrect returns, scope conflicts, or closure leaks using DevTools. Breakpoints and console logs help trace function execution and variable access. This lesson covers setting breakpoints, inspecting scope chains, and debugging closure-related bugs. You’ll learn to troubleshoot common issues, ensuring your functions and closures work reliably in web applications.",
        "examples": [
          "Debugging: function test() { let x = 10; return () => x; } // Inspect closure variable",
          "Set a breakpoint to check function parameter values."
        ],
        "realWorldApplication": "Debugging is essential for fixing issues in event handlers, state management, and modular code in large web projects.",
        "expertInsights": "Use DevTools’ Scope pane to inspect closure variables. Log function inputs and outputs to catch logical errors early.",
        "commonMistakes": [
          "Ignoring scope-related errors, like accessing undefined variables.",
          "Not checking closure state, causing memory leaks."
        ],
        "exercises": [
          {
            "title": "Debug a Closure",
            "prompt": "Write a closure with a counter that doesn’t increment correctly. Use DevTools to fix it.",
            "difficulty": "medium",
            "hints": [
              "Check the closure’s variable in DevTools",
              "Ensure the counter updates"
            ],
            "solution": "function counter() { let count = 0; return () => count++; } let inc = counter(); console.log(inc()); // Fixed to increment"
          }
        ],
        "quiz": [
          {
            "question": "Which DevTools feature shows closure variables?",
            "options": ["Console", "Scope pane", "Network", "Sources"],
            "correctOption": [1]
          },
          {
            "question": "What can cause a closure to malfunction?",
            "options": [
              "Incorrect scope access",
              "Global variables",
              "Too many parameters",
              "No return"
            ],
            "correctOption": [0]
          }
        ],
        "estimatedTime": 45,
        "resources": [
          {
            "title": "MDN — Debugging JavaScript",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/How_to_debug",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Building and deploying a functional JavaScript script involves creating modular code with functions and closures, integrating it with HTML, and publishing it online. This lesson guides you through writing a script with functions and closures (e.g., a private counter or event handler), using Git for version control, and deploying it with platforms like GitHub Pages or Vercel. You’ll learn to test functionality in DevTools, ensure cross-browser compatibility, and maintain organized code.",
        "examples": [
          "<script>const counter = (() => { let count = 0; return () => count++; })(); document.querySelector('button').addEventListener('click', () => document.querySelector('p').textContent = counter());</script>",
          "Deploy a page with a closure-based counter to GitHub Pages."
        ],
        "realWorldApplication": "Functions and closures power interactive features like counters, toggles, and private state management in web apps.",
        "expertInsights": "Use closures for private state in interactive components. Test scripts across browsers and commit small changes to Git for easier debugging.",
        "commonMistakes": [
          "Deploying untested functions, causing runtime errors.",
          "Not encapsulating state with closures, exposing variables."
        ],
        "exercises": [
          {
            "title": "Deploy a Functional Script",
            "prompt": "Write a script using a closure to track button clicks and update a paragraph’s text, then deploy it using GitHub Pages.",
            "difficulty": "medium",
            "hints": [
              "Use a closure for the counter",
              "Test event listener in DevTools"
            ],
            "solution": "HTML: <button>Click</button><p>0</p><script src=\"script.js\"></script>\nJS: const counter = (() => { let count = 0; return () => count++; })(); document.querySelector('button').addEventListener('click', () => document.querySelector('p').textContent = counter());\nGit: git add ., git commit -m 'Added functional script', git push, enable GitHub Pages."
          }
        ],
        "quiz": [
          {
            "question": "Which method adds an event listener?",
            "options": [
              "addEventListener",
              "textContent",
              "querySelector",
              "createElement"
            ],
            "correctOption": [0]
          },
          {
            "question": "Which platform supports static site deployment?",
            "options": ["MySQL", "Vercel", "MongoDB", "Redis"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 60,
        "resources": [
          {
            "title": "GitHub Pages Documentation",
            "url": "https://docs.github.com/en/pages",
            "type": "doc"
          },
          {
            "title": "Vercel — Deploying Static Sites",
            "url": "https://vercel.com/docs/platform/deployments",
            "type": "doc"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "meta": {
      "generatedAt": "2025-09-16T00:00:00.000Z",
      "version": "1.0"
    }
  },
  {
    "domains": [
      {
        "name": "Web Development",
        "slug": "web-development",
        "description": "Explore JavaScript arrays and objects, focusing on manipulation and iteration techniques to manage and process data for dynamic web applications.",
        "courseCount": 1,
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "courses": [
      {
        "title": "JavaScript Arrays & Objects: Data Management",
        "slug": "js-arrays-objects",
        "shortDescription": "A beginner-to-intermediate course on JavaScript arrays and objects, covering manipulation, iteration, and their use in dynamic web applications.",
        "longDescription": "This course dives into JavaScript arrays and objects, essential data structures for managing and processing data in web development. You’ll learn to create, manipulate, and iterate over arrays and objects using methods like map, filter, and forEach for arrays, and property access for objects. Through hands-on exercises, real-world examples, and quizzes, you’ll build scripts to handle tasks like list rendering and data transformation. The course also covers debugging data-related issues in DevTools and deploying scripts, preparing you for advanced data handling in web applications.",
        "tags": [
          "javascript",
          "web",
          "arrays",
          "objects",
          "iteration",
          "frontend"
        ],
        "thumbnail": "https://example.com/thumbnails/js-arrays-objects.jpg",

        "levelSummary": [
          {
            "level": "Beginner to Intermediate",
            "overview": "Learn to manipulate and iterate over JavaScript arrays and objects for dynamic data processing in web applications.",
            "moduleCount": 1
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "modules": [
      {
        "title": "Module 1 — Arrays and Objects in JavaScript",
        "slug": "js-arrays-objects",
        "description": "Master JavaScript arrays and objects, including manipulation and iteration techniques for efficient data handling.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "lessons": [
      {
        "title": "Introduction to Arrays and Objects",
        "slug": "intro-arrays-objects",
        "description": "Understand the role of arrays and objects in JavaScript for storing and managing data.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Array Manipulation",
        "slug": "array-manipulation",
        "description": "Learn to manipulate arrays using methods like push, pop, slice, and splice.",

        "order": 2,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Array Iteration",
        "slug": "array-iteration",
        "description": "Explore array iteration methods like forEach, map, filter, and reduce for data processing.",

        "order": 3,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Object Manipulation",
        "slug": "object-manipulation",
        "description": "Master object creation, property access, and manipulation for structured data.",

        "order": 4,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Debugging Arrays and Objects",
        "slug": "debugging-arrays-objects",
        "description": "Use DevTools to debug issues with array and object manipulation and iteration.",

        "order": 5,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Building and Deploying a Data-Driven Script",
        "slug": "data-driven-script-deploy",
        "description": "Create a JavaScript script using arrays and objects, then deploy it within an HTML page using Git.",

        "order": 6,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "learningContents": [
      {
        "explanation": "Arrays and objects are fundamental JavaScript data structures for storing and organizing data. Arrays hold ordered lists, while objects store key-value pairs for structured data. This lesson introduces arrays and objects, their syntax, and their role in web development for tasks like list rendering and data storage. You’ll learn to create and access these structures, setting the stage for manipulation and iteration in dynamic web applications.",
        "examples": [
          "let arr = [1, 2, 3]; console.log(arr[0]); // 1",
          "let obj = { name: 'Alice', age: 25 }; console.log(obj.name); // Alice"
        ],
        "realWorldApplication": "Arrays and objects are used to manage lists (e.g., product catalogs) and structured data (e.g., user profiles) in web apps.",
        "expertInsights": "Use arrays for ordered data and objects for key-based access. Always validate data before processing to avoid errors.",
        "commonMistakes": [
          "Confusing array indices with object keys, leading to access errors.",
          "Not initializing arrays or objects, causing undefined errors."
        ],
        "exercises": [
          {
            "title": "Create an Array and Object",
            "prompt": "Declare an array of numbers and an object with user data, then log their first element and a property.",
            "difficulty": "easy",
            "hints": [
              "Use square brackets for arrays",
              "Use dot notation for objects"
            ],
            "solution": "let numbers = [10, 20, 30]; let user = { name: 'Bob', age: 30 }; console.log(numbers[0], user.name);"
          }
        ],
        "quiz": [
          {
            "question": "How do you access the first element of an array?",
            "options": ["arr.0", "arr[0]", "arr.first", "arr(0)"],
            "correctOption": [1]
          },
          {
            "question": "What is the syntax for an object property?",
            "options": ["obj[key]", "obj.key", "obj(key)", "Both a and b"],
            "correctOption": [3]
          }
        ],
        "estimatedTime": 30,
        "resources": [
          {
            "title": "MDN — Arrays and Objects",
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Array manipulation involves modifying arrays using methods like `push`, `pop`, `slice`, `splice`, and more. These methods allow adding, removing, or extracting elements to manage data dynamically. This lesson covers key array methods, their use cases, and how to manipulate arrays for tasks like updating lists. You’ll learn to apply these methods in scripts and test them in the console to ensure correct data handling.",
        "examples": [
          "let arr = [1, 2, 3]; arr.push(4); console.log(arr); // [1, 2, 3, 4]",
          "let removed = arr.splice(1, 1); console.log(arr); // [1, 3, 4]"
        ],
        "realWorldApplication": "Array manipulation is used in shopping carts, to-do lists, and dynamic content updates in web applications.",
        "expertInsights": "Use `slice` for non-destructive operations and `splice` for in-place modifications. Check array length to avoid index errors.",
        "commonMistakes": [
          "Confusing `slice` and `splice`, leading to unexpected changes.",
          "Accessing out-of-bounds indices, causing undefined results."
        ],
        "exercises": [
          {
            "title": "Manipulate an Array",
            "prompt": "Create an array, add an element with push, remove one with splice, and log the result.",
            "difficulty": "easy",
            "hints": [
              "Use push to add, splice to remove",
              "Log the array after each change"
            ],
            "solution": "let arr = [1, 2, 3]; arr.push(4); arr.splice(1, 1); console.log(arr); // [1, 3, 4]"
          }
        ],
        "quiz": [
          {
            "question": "Which method adds an element to the end of an array?",
            "options": ["pop", "push", "slice", "splice"],
            "correctOption": [1]
          },
          {
            "question": "What does splice(1, 1) do?",
            "options": [
              "Adds 1 element",
              "Removes 1 element at index 1",
              "Extracts 1 element",
              "Reverses the array"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 40,
        "resources": [
          {
            "title": "MDN — Array Methods",
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Array iteration methods like `forEach`, `map`, `filter`, and `reduce` allow processing each element efficiently. These methods are ideal for transforming, filtering, or aggregating data without manual loops. This lesson covers how to use these methods, their return values, and their applications in web development. You’ll learn to iterate over arrays for tasks like rendering lists or calculating totals, testing results in the console for accuracy.",
        "examples": [
          "[1, 2, 3].forEach(num => console.log(num));",
          "let doubled = [1, 2, 3].map(num => num * 2); // [2, 4, 6]"
        ],
        "realWorldApplication": "Iteration is used for rendering product lists, filtering search results, and aggregating data in dashboards.",
        "expertInsights": "Use `map` for transformations, `filter` for subset selection, and `reduce` for aggregations. Chain methods for concise code.",
        "commonMistakes": [
          "Using `forEach` when `map` is needed, losing return values.",
          "Mutating arrays during iteration, causing unpredictable results."
        ],
        "exercises": [
          {
            "title": "Iterate with Map",
            "prompt": "Use the map method to double the values in an array and log the result.",
            "difficulty": "medium",
            "hints": [
              "Use map with a callback",
              "Return the transformed value"
            ],
            "solution": "let numbers = [1, 2, 3]; let doubled = numbers.map(num => num * 2); console.log(doubled); // [2, 4, 6]"
          }
        ],
        "quiz": [
          {
            "question": "Which method returns a new array?",
            "options": ["forEach", "map", "reduce", "Both b and c"],
            "correctOption": [3]
          },
          {
            "question": "What does filter do?",
            "options": [
              "Transforms elements",
              "Selects elements",
              "Aggregates values",
              "Logs elements"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 45,
        "resources": [
          {
            "title": "MDN — Array Iteration",
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterating_over_arrays",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Object manipulation involves creating, accessing, and modifying key-value pairs using dot notation, bracket notation, or methods like `Object.keys`. Objects are ideal for structured data like user profiles or configurations. This lesson covers object creation, updating properties, and adding/deleting keys. You’ll learn to manage objects in scripts, such as updating DOM elements based on object data, and test changes in the console for reliability.",
        "examples": [
          "let user = { name: 'Alice' }; user.age = 25; console.log(user); // { name: 'Alice', age: 25 }",
          "delete user.age; console.log(user); // { name: 'Alice' }"
        ],
        "realWorldApplication": "Objects are used to store user data, API responses, and configuration settings in web applications.",
        "expertInsights": "Use bracket notation for dynamic keys and dot notation for static ones. Validate object properties to avoid undefined errors.",
        "commonMistakes": [
          "Accessing non-existent properties, causing undefined errors.",
          "Using dot notation with invalid key names."
        ],
        "exercises": [
          {
            "title": "Manipulate an Object",
            "prompt": "Create an object, add a property, delete another, and log the result.",
            "difficulty": "medium",
            "hints": [
              "Use dot or bracket notation",
              "Use delete to remove a property"
            ],
            "solution": "let user = { name: 'Alice' }; user.age = 25; delete user.name; console.log(user); // { age: 25 }"
          }
        ],
        "quiz": [
          {
            "question": "How do you delete an object property?",
            "options": ["remove", "delete", "unset", "clear"],
            "correctOption": [1]
          },
          {
            "question": "Which notation accesses dynamic keys?",
            "options": ["Dot notation", "Bracket notation", "Both", "Neither"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 40,
        "resources": [
          {
            "title": "MDN — Working with Objects",
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Debugging arrays and objects involves identifying issues like incorrect indexing, undefined properties, or iteration errors using DevTools. Breakpoints and console logs help trace data operations. This lesson covers debugging array methods, object property access, and iteration logic. You’ll learn to troubleshoot common issues, like accessing non-existent keys or mutating arrays unexpectedly, ensuring robust data handling in web applications.",
        "examples": [
          "Debugging: let arr = [1, 2]; console.log(arr[2]); // undefined",
          "Set a breakpoint to inspect object properties in a loop."
        ],
        "realWorldApplication": "Debugging is critical for fixing issues in data-driven features like product lists, user profiles, and API integrations.",
        "expertInsights": "Use `console.table` for arrays and objects to visualize data. Set breakpoints in loops to catch iteration errors early.",
        "commonMistakes": [
          "Ignoring undefined errors from invalid array indices or object keys.",
          "Mutating arrays during iteration, causing inconsistent results."
        ],
        "exercises": [
          {
            "title": "Debug an Array Iteration",
            "prompt": "Write a map method that fails to double array values. Use DevTools to fix it.",
            "difficulty": "medium",
            "hints": [
              "Check the map callback",
              "Use console.log to trace values"
            ],
            "solution": "let numbers = [1, 2, 3]; let doubled = numbers.map(num => num * 2); console.log(doubled); // [2, 4, 6]"
          }
        ],
        "quiz": [
          {
            "question": "Which DevTools feature visualizes array data?",
            "options": ["Console", "Scope pane", "Console.table", "Network"],
            "correctOption": [2]
          },
          {
            "question": "What causes an undefined error in arrays?",
            "options": [
              "Invalid index",
              "Missing loop",
              "Wrong method",
              "No variables"
            ],
            "correctOption": [0]
          }
        ],
        "estimatedTime": 45,
        "resources": [
          {
            "title": "MDN — Debugging JavaScript",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/How_to_debug",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Building and deploying a data-driven JavaScript script involves using arrays and objects to manage data, integrating with HTML, and publishing online. This lesson guides you through creating a script that manipulates and iterates over arrays or objects (e.g., rendering a product list), using Git for version control, and deploying with platforms like GitHub Pages or Vercel. You’ll learn to test data operations in DevTools, ensure cross-browser compatibility, and maintain clean code.",
        "examples": [
          "<script>const products = [{ name: 'Item', price: 10 }]; products.forEach(p => document.querySelector('ul').innerHTML += `<li>${p.name}</li>`);</script>",
          "Deploy a page with an array-based list renderer to GitHub Pages."
        ],
        "realWorldApplication": "Arrays and objects power dynamic features like product catalogs, user dashboards, and data visualizations in web apps.",
        "expertInsights": "Use array methods for clean data processing. Test scripts across browsers and commit small changes to Git for easier debugging.",
        "commonMistakes": [
          "Deploying untested data scripts, causing runtime errors.",
          "Not validating array or object data, leading to undefined errors."
        ],
        "exercises": [
          {
            "title": "Deploy a Data-Driven Script",
            "prompt": "Write a script to render an array of objects as a list in HTML, then deploy it using GitHub Pages.",
            "difficulty": "medium",
            "hints": [
              "Use forEach or map to generate list items",
              "Test in DevTools before deploying"
            ],
            "solution": "HTML: <ul id='list'></ul><script src='script.js'></script>\nJS: const items = [{ name: 'Item1' }, { name: 'Item2' }]; items.forEach(item => document.querySelector('#list').innerHTML += `<li>${item.name}</li>`);\nGit: git add ., git commit -m 'Added data-driven script', git push, enable GitHub Pages."
          }
        ],
        "quiz": [
          {
            "question": "Which method renders array data to the DOM?",
            "options": ["forEach", "map", "Both a and b", "reduce"],
            "correctOption": [2]
          },
          {
            "question": "Which platform supports static site deployment?",
            "options": ["MySQL", "Vercel", "MongoDB", "Redis"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 60,
        "resources": [
          {
            "title": "GitHub Pages Documentation",
            "url": "https://docs.github.com/en/pages",
            "type": "doc"
          },
          {
            "title": "Vercel — Deploying Static Sites",
            "url": "https://vercel.com/docs/platform/deployments",
            "type": "doc"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "meta": {
      "generatedAt": "2025-09-16T00:00:00.000Z",
      "version": "1.0"
    }
  },
  {
    "domains": [
      {
        "name": "Web Development",
        "slug": "web-development",
        "description": "Master JavaScript DOM manipulation and events, including selecting elements, updating the DOM, and event listeners to create interactive web applications.",
        "courseCount": 1,
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "courses": [
      {
        "title": "JavaScript DOM Manipulation & Events: Interactive Web Pages",
        "slug": "js-dom-manipulation-events",
        "shortDescription": "A beginner-to-intermediate course on JavaScript DOM manipulation and events, covering selecting elements, updating the DOM, and event listeners for dynamic interactivity.",
        "longDescription": "This course explores JavaScript's interaction with the Document Object Model (DOM), enabling dynamic updates and user interactions on web pages. You’ll learn to select DOM elements using methods like querySelector, update content and styles, and handle events with listeners for clicks, inputs, and more. Through hands-on exercises, real-world examples, and quizzes, you’ll build interactive features like toggles and form handlers. The course also covers debugging DOM issues in DevTools and deploying scripts, preparing you for creating responsive, event-driven web applications.",
        "tags": [
          "javascript",
          "web",
          "dom",
          "events",
          "interactive",
          "frontend"
        ],
        "thumbnail": "https://example.com/thumbnails/js-dom-events.jpg",

        "levelSummary": [
          {
            "level": "Beginner to Intermediate",
            "overview": "Learn DOM selection, manipulation, and event handling to build interactive web applications with JavaScript.",
            "moduleCount": 1
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "modules": [
      {
        "title": "Module 1 — DOM Manipulation and Events",
        "slug": "js-dom-manipulation-events",
        "description": "Dive into JavaScript DOM manipulation, including selecting elements, updating content, and handling events for interactive web experiences.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "lessons": [
      {
        "title": "Introduction to the DOM",
        "slug": "intro-dom",
        "description": "Understand the Document Object Model (DOM) and its role in JavaScript for web page manipulation.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Selecting DOM Elements",
        "slug": "selecting-dom-elements",
        "description": "Learn to select DOM elements using querySelector, getElementById, and other methods.",

        "order": 2,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Updating the DOM",
        "slug": "updating-dom",
        "description": "Master updating DOM content, attributes, and styles using JavaScript.",

        "order": 3,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Event Listeners",
        "slug": "event-listeners",
        "description": "Explore adding event listeners to handle user interactions like clicks and inputs.",

        "order": 4,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Handling Events",
        "slug": "handling-events",
        "description": "Learn to handle different events and prevent default behaviors in JavaScript.",

        "order": 5,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Building and Deploying an Interactive Script",
        "slug": "interactive-script-deploy",
        "description": "Create an interactive JavaScript script with DOM manipulation and events, then deploy it using Git.",

        "order": 6,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "learningContents": [
      {
        "explanation": "The Document Object Model (DOM) is a programming interface for HTML and XML documents, representing the page structure as a tree of objects. JavaScript interacts with the DOM to dynamically change content, structure, and styles without reloading the page. This lesson covers the DOM's structure, how browsers parse HTML into the DOM, and JavaScript's role in manipulation. You’ll learn the basics of the DOM tree, nodes, and elements, preparing you for selecting and updating web content dynamically.",
        "examples": [
          "document.body.innerHTML = '<h1>Hello DOM!</h1>';",
          "console.log(document.querySelector('body')); // Accesses the body element"
        ],
        "realWorldApplication": "The DOM enables single-page applications (SPAs) like React or Vue, where content updates dynamically based on user actions.",
        "expertInsights": "Understand the DOM as a live representation of the page; changes to it trigger reflows or repaints. Use DevTools Elements panel to inspect the DOM tree.",
        "commonMistakes": [
          "Confusing DOM with HTML source code; the DOM is the runtime representation.",
          "Manipulating the DOM without checking if elements exist, causing errors."
        ],
        "exercises": [
          {
            "title": "Inspect the DOM",
            "prompt": "Open DevTools on a webpage, inspect the <body> element, and log it to the console.",
            "difficulty": "easy",
            "hints": [
              "Use document.body in the console",
              "Check the Elements panel"
            ],
            "solution": "console.log(document.body); // Logs the body element object"
          }
        ],
        "quiz": [
          {
            "question": "What does DOM stand for?",
            "options": [
              "Document Object Model",
              "Dynamic Object Management",
              "Data Object Module",
              "Document Order Model"
            ],
            "correctOption": [0]
          },
          {
            "question": "How does JavaScript interact with the DOM?",
            "options": [
              "Via APIs like querySelector",
              "Directly editing HTML",
              "Through CSS only",
              "Server-side rendering"
            ],
            "correctOption": [0]
          }
        ],
        "estimatedTime": 30,
        "resources": [
          {
            "title": "MDN — Introduction to the DOM",
            "url": "https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Selecting DOM elements allows JavaScript to target specific parts of the page for manipulation. Methods like `getElementById`, `querySelector`, `querySelectorAll`, and `getElementsByClassName` enable selection by ID, CSS selectors, or classes. This lesson covers the syntax and best practices for selecting elements, including handling multiple matches and null returns. You’ll learn to select elements efficiently and test selections in the console to prepare for updates and events.",
        "examples": [
          "let elem = document.getElementById('myId');",
          "let items = document.querySelectorAll('.item'); // NodeList of elements"
        ],
        "realWorldApplication": "Selecting elements is used to target buttons, forms, or lists for dynamic updates in interactive web pages.",
        "expertInsights": "Prefer `querySelector` for its CSS-like flexibility. Always check if selected elements exist before manipulating them to avoid errors.",
        "commonMistakes": [
          "Using `querySelector` expecting multiple results; use `querySelectorAll` instead.",
          "Forgetting to handle null selections, causing runtime errors."
        ],
        "exercises": [
          {
            "title": "Select Elements",
            "prompt": "Write a script to select an element by ID and all elements by class, then log them.",
            "difficulty": "easy",
            "hints": [
              "Use getElementById and querySelectorAll",
              "Test in the console"
            ],
            "solution": "let elem = document.getElementById('header'); let items = document.querySelectorAll('.nav-item'); console.log(elem, items);"
          }
        ],
        "quiz": [
          {
            "question": "Which method selects by CSS selector?",
            "options": [
              "getElementById",
              "querySelector",
              "getElementsByTagName",
              "createElement"
            ],
            "correctOption": [1]
          },
          {
            "question": "What does querySelectorAll return?",
            "options": ["Single element", "NodeList", "Array", "String"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 40,
        "resources": [
          {
            "title": "MDN — Locating DOM Elements",
            "url": "https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Locating_DOM_elements_using_selectors",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Updating the DOM involves changing element content, attributes, styles, or structure using properties like `textContent`, `innerHTML`, `setAttribute`, and `style`. These updates allow dynamic content without page reloads. This lesson covers safe updating practices, including avoiding XSS with `textContent` over `innerHTML`, and modifying styles or classes. You’ll learn to update elements based on logic or data, testing changes in DevTools for visual feedback.",
        "examples": [
          "let para = document.querySelector('p'); para.textContent = 'Updated text';",
          "elem.style.color = 'blue'; elem.classList.add('active');"
        ],
        "realWorldApplication": "DOM updates power real-time features like live search results, counters, or theme toggles in web apps.",
        "expertInsights": "Use `textContent` for plain text to prevent XSS. Batch updates with `classList` for styles to optimize performance.",
        "commonMistakes": [
          "Using `innerHTML` with user input, risking security vulnerabilities.",
          "Forgetting to select elements first, causing null reference errors."
        ],
        "exercises": [
          {
            "title": "Update DOM Content",
            "prompt": "Select a paragraph and update its textContent and add a class.",
            "difficulty": "medium",
            "hints": ["Use querySelector and textContent", "Use classList.add"],
            "solution": "let para = document.querySelector('p'); para.textContent = 'New content'; para.classList.add('highlight');"
          }
        ],
        "quiz": [
          {
            "question": "Which property safely updates text?",
            "options": ["innerHTML", "textContent", "outerHTML", "value"],
            "correctOption": [1]
          },
          {
            "question": "What method adds a class to an element?",
            "options": [
              "setAttribute",
              "classList.add",
              "style.class",
              "addClass"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 45,
        "resources": [
          {
            "title": "MDN — Modifying the DOM",
            "url": "https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Modifying_the_DOM",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Event listeners attach functions to DOM elements to respond to user actions like clicks, keypresses, or mouse movements. The `addEventListener` method specifies the event type and handler function. This lesson covers adding and removing listeners, event object properties, and propagation. You’ll learn to create interactive elements, such as buttons that toggle visibility, and test events in DevTools.",
        "examples": [
          "button.addEventListener('click', () => console.log('Clicked!'));",
          "input.addEventListener('keyup', handleInput);"
        ],
        "realWorldApplication": "Event listeners enable user interactions like form submissions, menu toggles, and drag-and-drop in web apps.",
        "expertInsights": "Use event delegation for dynamic elements. Remove listeners to prevent memory leaks in long-running apps.",
        "commonMistakes": [
          "Adding multiple listeners to the same element, causing duplicate actions.",
          "Not removing listeners, leading to performance issues."
        ],
        "exercises": [
          {
            "title": "Add an Event Listener",
            "prompt": "Select a button and add a click listener that logs a message to the console.",
            "difficulty": "medium",
            "hints": [
              "Use addEventListener with 'click'",
              "Test by clicking the button"
            ],
            "solution": "let btn = document.querySelector('button'); btn.addEventListener('click', () => console.log('Button clicked!'));"
          }
        ],
        "quiz": [
          {
            "question": "Which method adds an event listener?",
            "options": [
              "addListener",
              "attachEvent",
              "addEventListener",
              "onEvent"
            ],
            "correctOption": [2]
          },
          {
            "question": "What does the event object provide?",
            "options": [
              "DOM elements",
              "Event details like target",
              "CSS styles",
              "Array methods"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 50,
        "resources": [
          {
            "title": "MDN — EventTarget.addEventListener",
            "url": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Handling events involves responding to specific events, accessing event details, and preventing default behaviors (e.g., form submission). Event handlers can update the DOM or perform validations. This lesson covers common events (click, submit, keydown), the event object, and methods like `preventDefault` and `stopPropagation`. You’ll learn to build responsive interactions, such as validating forms or toggling classes, and debug event flows in DevTools.",
        "examples": [
          "form.addEventListener('submit', e => { e.preventDefault(); console.log('Form submitted'); });",
          "e.target.style.backgroundColor = 'red'; // Access event target"
        ],
        "realWorldApplication": "Event handling powers user interfaces like dropdown menus, sliders, and real-time validations in web apps.",
        "expertInsights": "Use `preventDefault` for custom behaviors. Understand event bubbling for efficient delegation.",
        "commonMistakes": [
          "Not preventing default actions, causing unwanted page reloads.",
          "Ignoring event object properties, missing key details like target."
        ],
        "exercises": [
          {
            "title": "Handle a Form Event",
            "prompt": "Add a submit listener to a form that prevents default and logs the input value.",
            "difficulty": "medium",
            "hints": [
              "Use preventDefault and e.target.value",
              "Test by submitting the form"
            ],
            "solution": "let form = document.querySelector('form'); form.addEventListener('submit', e => { e.preventDefault(); console.log(e.target.querySelector('input').value); });"
          }
        ],
        "quiz": [
          {
            "question": "Which method prevents default behavior?",
            "options": [
              "stopEvent",
              "preventDefault",
              "cancelEvent",
              "stopPropagation"
            ],
            "correctOption": [1]
          },
          {
            "question": "What event occurs on key press?",
            "options": ["click", "keydown", "submit", "load"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 50,
        "resources": [
          {
            "title": "MDN — Event Handlers",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Building and deploying an interactive JavaScript script involves combining DOM selection, updates, and events to create engaging features, then publishing online. This lesson guides you through writing a script for an interactive element (e.g., a toggle button or form validator), using Git for version control, and deploying with platforms like GitHub Pages or Vercel. You’ll learn to test interactions in DevTools, ensure compatibility, and maintain code organization.",
        "examples": [
          "<button id='toggle'>Toggle</button><div id='content'>Hidden</div><script>document.querySelector('#toggle').addEventListener('click', () => { let content = document.querySelector('#content'); content.style.display = content.style.display === 'none' ? 'block' : 'none'; });</script>",
          "Deploy a page with event-driven interactivity to GitHub Pages."
        ],
        "realWorldApplication": "Interactive scripts enable features like modals, accordions, and dynamic forms in web apps.",
        "expertInsights": "Test events on multiple devices. Use semantic HTML for better accessibility and commit changes incrementally.",
        "commonMistakes": [
          "Deploying without testing events, causing non-functional interactions.",
          "Hardcoding selectors, breaking code with HTML changes."
        ],
        "exercises": [
          {
            "title": "Deploy an Interactive Script",
            "prompt": "Create a script with a click event that toggles a div's visibility, then deploy using GitHub Pages.",
            "difficulty": "medium",
            "hints": [
              "Use addEventListener and style.display",
              "Test clicks in DevTools"
            ],
            "solution": "HTML: <button>Toggle</button><div>Content</div><script src='script.js'></script>\nJS: document.querySelector('button').addEventListener('click', () => { document.querySelector('div').style.display = document.querySelector('div').style.display === 'none' ? 'block' : 'none'; });\nGit: git add ., git commit -m 'Added interactive script', git push, enable GitHub Pages."
          }
        ],
        "quiz": [
          {
            "question": "Which property toggles visibility?",
            "options": ["display", "visibility", "opacity", "height"],
            "correctOption": [0]
          },
          {
            "question": "Which platform supports static site deployment?",
            "options": ["MySQL", "Vercel", "MongoDB", "Redis"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 60,
        "resources": [
          {
            "title": "GitHub Pages Documentation",
            "url": "https://docs.github.com/en/pages",
            "type": "doc"
          },
          {
            "title": "Vercel — Deploying Static Sites",
            "url": "https://vercel.com/docs/platform/deployments",
            "type": "doc"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "meta": {
      "generatedAt": "2025-09-16T00:00:00.000Z",
      "version": "1.0"
    }
  },
  {
    "domains": [
      {
        "name": "Web Development",
        "slug": "web-development",
        "description": "Learn JavaScript form handling, validation, and small UI behaviors to create interactive and user-friendly web forms.",
        "courseCount": 1,
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "courses": [
      {
        "title": "JavaScript Forms, Validation & UI Behaviors",
        "slug": "js-forms-validation-ui",
        "shortDescription": "A beginner-to-intermediate course on JavaScript form handling, simple validation, and small UI behaviors for interactive web forms.",
        "longDescription": "This course focuses on JavaScript for form handling, validation, and small UI behaviors to enhance user interaction. You’ll learn to capture form input, implement simple validation (e.g., required fields, email formats), and add dynamic UI behaviors like toggles or error messages. Through hands-on exercises, real-world examples, and quizzes, you’ll build functional forms, such as login or contact forms, and debug issues using DevTools. The course also covers deploying form-based scripts, preparing you for creating user-friendly web interfaces.",
        "tags": ["javascript", "web", "forms", "validation", "ui", "frontend"],
        "thumbnail": "https://example.com/thumbnails/js-forms-validation.jpg",

        "levelSummary": [
          {
            "level": "Beginner to Intermediate",
            "overview": "Learn to handle forms, validate inputs, and create small UI behaviors with JavaScript for interactive web applications.",
            "moduleCount": 1
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "modules": [
      {
        "title": "Module 1 — Forms, Validation, and UI Behaviors",
        "slug": "js-forms-validation-ui",
        "description": "Master JavaScript form handling, input validation, and small UI behaviors to create dynamic and user-friendly web interfaces.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "lessons": [
      {
        "title": "Introduction to Forms in JavaScript",
        "slug": "intro-js-forms",
        "description": "Understand the basics of HTML forms and how JavaScript interacts with them for dynamic input handling.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Capturing Form Input",
        "slug": "capturing-form-input",
        "description": "Learn to capture and process user input from form elements using JavaScript.",

        "order": 2,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Simple Form Validation",
        "slug": "simple-form-validation",
        "description": "Implement basic client-side validation for form inputs, such as required fields and email formats.",

        "order": 3,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Creating Small UI Behaviors",
        "slug": "small-ui-behaviors",
        "description": "Add dynamic UI behaviors to forms, such as error messages or toggles, using JavaScript.",

        "order": 4,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Debugging Forms and Validation",
        "slug": "debugging-forms-validation",
        "description": "Use DevTools to debug form handling and validation issues for robust functionality.",

        "order": 5,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Building and Deploying a Form Script",
        "slug": "form-script-deploy",
        "description": "Create a JavaScript script for form handling and validation, then deploy it using Git.",

        "order": 6,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "learningContents": [
      {
        "explanation": "HTML forms collect user input, and JavaScript enhances them by capturing data and enabling dynamic interactions. Forms use elements like `<input>`, `<select>`, and `<button>`, which JavaScript accesses via the DOM. This lesson introduces form structure, how JavaScript interacts with forms through events, and the basics of handling user input. You’ll learn to set up a simple form and use JavaScript to process its data, preparing for validation and UI enhancements.",
        "examples": [
          "<form><input type='text' id='name'></form><script>console.log(document.getElementById('name').value);</script>",
          "Accessing form data: let form = document.querySelector('form');"
        ],
        "realWorldApplication": "Forms are used in login pages, contact forms, and surveys, enabling user data collection and interaction in web apps.",
        "expertInsights": "Use semantic HTML form elements for accessibility. Always validate inputs on both client and server sides for security.",
        "commonMistakes": [
          "Not using proper form element IDs or names, causing selection issues.",
          "Assuming form data is safe without validation, risking errors."
        ],
        "exercises": [
          {
            "title": "Set Up a Form",
            "prompt": "Create an HTML form with a text input and log its value to the console using JavaScript.",
            "difficulty": "easy",
            "hints": [
              "Use querySelector to access the input",
              "Log the input’s value property"
            ],
            "solution": "<form><input type='text' id='input'></form><script>console.log(document.getElementById('input').value);</script>"
          }
        ],
        "quiz": [
          {
            "question": "Which element is used for text input in forms?",
            "options": ["<text>", "<input>", "<textarea>", "Both b and c"],
            "correctOption": [3]
          },
          {
            "question": "How does JavaScript access form data?",
            "options": [
              "Via CSS",
              "Via DOM",
              "Via server",
              "Via local storage"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 30,
        "resources": [
          {
            "title": "MDN — HTML Forms",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/Forms",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Capturing form input involves accessing values from form elements like inputs, selects, or textareas using properties like `value`. JavaScript can listen for events like `input` or `change` to capture data dynamically. This lesson covers selecting form elements, retrieving their values, and handling real-time input changes. You’ll learn to process user input for tasks like live previews and test captures in the console for accuracy.",
        "examples": [
          "let input = document.querySelector('#name'); input.addEventListener('input', () => console.log(input.value));",
          "let form = document.querySelector('form'); console.log(form.elements['email'].value);"
        ],
        "realWorldApplication": "Capturing input is used in search bars, live form previews, and dynamic filters in web applications.",
        "expertInsights": "Use `input` events for real-time updates and `change` for completed changes. Always sanitize input to prevent injection attacks.",
        "commonMistakes": [
          "Accessing form values before user input, resulting in empty strings.",
          "Not handling dynamic elements, causing selection errors."
        ],
        "exercises": [
          {
            "title": "Capture Input",
            "prompt": "Create a text input and log its value on every change using an event listener.",
            "difficulty": "easy",
            "hints": ["Use the input event", "Access the value property"],
            "solution": "<input type='text' id='text'><script>document.getElementById('text').addEventListener('input', e => console.log(e.target.value));</script>"
          }
        ],
        "quiz": [
          {
            "question": "Which event captures real-time input changes?",
            "options": ["click", "submit", "input", "load"],
            "correctOption": [2]
          },
          {
            "question": "How do you access an input’s value?",
            "options": [
              "input.text",
              "input.value",
              "input.data",
              "input.innerHTML"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 40,
        "resources": [
          {
            "title": "MDN — Form Input",
            "url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Simple form validation ensures user input meets criteria, like required fields or valid email formats, before processing. JavaScript can check inputs on submit or in real-time, displaying feedback. This lesson covers validating inputs using conditionals, regular expressions for patterns (e.g., email), and preventing form submission if invalid. You’ll learn to implement client-side validation and test it in DevTools for reliability.",
        "examples": [
          "form.addEventListener('submit', e => { if (!document.getElementById('email').value) { e.preventDefault(); console.log('Email required'); } });",
          "const emailPattern = /^[^@]+@[^@]+\\.[^@]+$/; console.log(emailPattern.test('test@example.com')); // true"
        ],
        "realWorldApplication": "Validation ensures accurate data in registration forms, checkout processes, and user surveys.",
        "expertInsights": "Combine HTML5 validation (e.g., required, pattern) with JavaScript for flexibility. Always validate on the server for security.",
        "commonMistakes": [
          "Not preventing form submission on invalid input, allowing bad data.",
          "Using weak regex patterns, missing edge cases."
        ],
        "exercises": [
          {
            "title": "Validate a Form",
            "prompt": "Create a form with an email input and validate it’s not empty on submit, logging an error if invalid.",
            "difficulty": "medium",
            "hints": ["Use preventDefault on submit", "Check input.value"],
            "solution": "<form id='form'><input type='email' id='email'></form><script>document.getElementById('form').addEventListener('submit', e => { if (!document.getElementById('email').value) { e.preventDefault(); console.log('Email required'); } });</script>"
          }
        ],
        "quiz": [
          {
            "question": "Which method prevents form submission?",
            "options": [
              "stopPropagation",
              "preventDefault",
              "stopEvent",
              "cancelSubmit"
            ],
            "correctOption": [1]
          },
          {
            "question": "What is used to validate email formats?",
            "options": ["Loops", "Regular expressions", "Objects", "Arrays"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 45,
        "resources": [
          {
            "title": "MDN — Form Validation",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Small UI behaviors enhance form usability with features like error messages, toggles, or dynamic feedback. JavaScript can show/hide elements, update styles, or display alerts based on user actions. This lesson covers creating UI behaviors, such as showing error messages for invalid inputs or toggling form fields. You’ll learn to combine DOM manipulation with events to create responsive interfaces and test them in DevTools.",
        "examples": [
          "let error = document.createElement('div'); error.textContent = 'Invalid input'; document.querySelector('form').appendChild(error);",
          "input.addEventListener('input', () => input.style.borderColor = input.value ? 'green' : 'red');"
        ],
        "realWorldApplication": "UI behaviors are used in form error messages, password strength indicators, and collapsible sections in web apps.",
        "expertInsights": "Keep UI updates minimal to avoid performance issues. Use CSS classes for styling changes to separate concerns.",
        "commonMistakes": [
          "Overusing inline styles instead of classes, reducing maintainability.",
          "Not clearing old UI feedback, causing cluttered interfaces."
        ],
        "exercises": [
          {
            "title": "Add UI Feedback",
            "prompt": "Create an input that shows a red border if empty and green if filled on input change.",
            "difficulty": "medium",
            "hints": ["Use the input event", "Update style.borderColor"],
            "solution": "<input type='text' id='input'><script>document.getElementById('input').addEventListener('input', e => { e.target.style.borderColor = e.target.value ? 'green' : 'red'; });</script>"
          }
        ],
        "quiz": [
          {
            "question": "How do you dynamically add an element to a form?",
            "options": [
              "createElement",
              "appendChild",
              "Both a and b",
              "setAttribute"
            ],
            "correctOption": [2]
          },
          {
            "question": "What’s a common way to style UI feedback?",
            "options": [
              "Inline styles",
              "CSS classes",
              "Attributes",
              "Text content"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 50,
        "resources": [
          {
            "title": "MDN — DOM Manipulation",
            "url": "https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Debugging forms and validation involves identifying issues like incorrect input capture, failed validations, or UI behavior errors using DevTools. Breakpoints and console logs help trace form events and data flow. This lesson covers debugging form submissions, validation logic, and UI updates, ensuring robust functionality. You’ll learn to troubleshoot common issues, like missing event listeners or invalid regex, and verify fixes in DevTools.",
        "examples": [
          "Debugging: form.addEventListener('submit', e => { console.log(e.target.elements['name'].value); });",
          "Set a breakpoint to inspect form input values on submit."
        ],
        "realWorldApplication": "Debugging ensures reliable form submissions, validations, and UI feedback in user-facing applications like sign-up pages.",
        "expertInsights": "Use DevTools’ Event Listener panel to check attached events. Log form data to catch validation errors early.",
        "commonMistakes": [
          "Ignoring console errors for missing elements or invalid inputs.",
          "Not testing edge cases, like empty or malformed inputs."
        ],
        "exercises": [
          {
            "title": "Debug a Form Validation",
            "prompt": "Create a form with a validation that fails for empty input. Use DevTools to fix it.",
            "difficulty": "medium",
            "hints": [
              "Check the submit event logic",
              "Use console.log to trace input values"
            ],
            "solution": "<form id='form'><input id='input'></form><script>document.getElementById('form').addEventListener('submit', e => { e.preventDefault(); if (document.getElementById('input').value) { console.log('Valid'); } else { console.log('Empty input'); } });</script>"
          }
        ],
        "quiz": [
          {
            "question": "Which DevTools feature shows form events?",
            "options": [
              "Console",
              "Event Listener panel",
              "Sources",
              "Network"
            ],
            "correctOption": [1]
          },
          {
            "question": "What causes a form validation error?",
            "options": [
              "Missing CSS",
              "Invalid input",
              "No events",
              "Server issues"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 45,
        "resources": [
          {
            "title": "MDN — Debugging JavaScript",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/How_to_debug",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Building and deploying a form-based JavaScript script involves handling form input, validating data, and adding UI behaviors, then publishing online. This lesson guides you through creating a script for a form with validation and feedback (e.g., a contact form), using Git for version control, and deploying with platforms like GitHub Pages or Vercel. You’ll learn to test form functionality in DevTools, ensure cross-browser compatibility, and maintain organized code.",
        "examples": [
          "<form id='form'><input id='email' type='email'><div id='error'></div></form><script>document.getElementById('form').addEventListener('submit', e => { e.preventDefault(); let email = document.getElementById('email').value; if (email) { document.getElementById('error').textContent = 'Success!'; } else { document.getElementById('error').textContent = 'Email required'; } });</script>",
          "Deploy a form with validation to GitHub Pages."
        ],
        "realWorldApplication": "Form scripts power user interactions in registration, feedback, and checkout forms, enhancing web app usability.",
        "expertInsights": "Test forms across devices and browsers. Use clear error messages and commit small changes to Git for easier debugging.",
        "commonMistakes": [
          "Deploying untested forms, causing validation failures.",
          "Not handling edge cases, like invalid email formats."
        ],
        "exercises": [
          {
            "title": "Deploy a Form Script",
            "prompt": "Create a form with email validation and error feedback, then deploy it using GitHub Pages.",
            "difficulty": "medium",
            "hints": [
              "Validate email with a simple check",
              "Use preventDefault and update a div for errors"
            ],
            "solution": "HTML: <form id='form'><input id='email' type='email'><div id='error'></div></form><script src='script.js'></script>\nJS: document.getElementById('form').addEventListener('submit', e => { e.preventDefault(); let email = document.getElementById('email').value; document.getElementById('error').textContent = email ? 'Success!' : 'Email required'; });\nGit: git add ., git commit -m 'Added form script', git push, enable GitHub Pages."
          }
        ],
        "quiz": [
          {
            "question": "Which event is used for form submission?",
            "options": ["click", "submit", "input", "change"],
            "correctOption": [1]
          },
          {
            "question": "Which platform supports static site deployment?",
            "options": ["MySQL", "Vercel", "MongoDB", "Redis"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 60,
        "resources": [
          {
            "title": "GitHub Pages Documentation",
            "url": "https://docs.github.com/en/pages",
            "type": "doc"
          },
          {
            "title": "Vercel — Deploying Static Sites",
            "url": "https://vercel.com/docs/platform/deployments",
            "type": "doc"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "meta": {
      "generatedAt": "2025-09-16T00:00:00.000Z",
      "version": "1.0"
    }
  },
  {
    "domains": [
      {
        "name": "Web Development",
        "slug": "web-development",
        "description": "Master asynchronous JavaScript, including callbacks, promises, fetch, and async/await, to handle dynamic data and API interactions in web applications.",
        "courseCount": 1,
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "courses": [
      {
        "title": "Asynchronous JavaScript: Callbacks, Promises, and APIs",
        "slug": "js-asynchronous-js",
        "shortDescription": "A beginner-to-intermediate course on asynchronous JavaScript, covering callbacks, promises, fetch, and async/await for dynamic web applications.",
        "longDescription": "This course dives into asynchronous JavaScript, essential for handling operations like API requests and delayed tasks. You’ll learn to use callbacks for sequencing, promises for streamlined asynchronous code, the fetch API for HTTP requests, and async/await for cleaner syntax. Through hands-on exercises, real-world examples, and quizzes, you’ll build scripts to fetch and display data from APIs. The course also covers debugging asynchronous code in DevTools and deploying scripts, preparing you for modern web development with dynamic data.",
        "tags": [
          "javascript",
          "web",
          "asynchronous",
          "promises",
          "fetch",
          "async-await",
          "frontend"
        ],
        "thumbnail": "https://example.com/thumbnails/js-async.jpg",

        "levelSummary": [
          {
            "level": "Beginner to Intermediate",
            "overview": "Learn asynchronous JavaScript techniques to handle API calls and dynamic data in web applications.",
            "moduleCount": 1
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "modules": [
      {
        "title": "Module 1 — Asynchronous JavaScript",
        "slug": "js-asynchronous-js",
        "description": "Explore callbacks, promises, fetch, and async/await to manage asynchronous operations in JavaScript for dynamic web interactions.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "lessons": [
      {
        "title": "Introduction to Asynchronous JavaScript",
        "slug": "intro-async-js",
        "description": "Understand asynchronous JavaScript and its role in handling non-blocking operations in web development.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Working with Callbacks",
        "slug": "callbacks",
        "description": "Learn to use callbacks to manage asynchronous operations and sequence tasks.",

        "order": 2,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Understanding Promises",
        "slug": "promises",
        "description": "Master promises to handle asynchronous operations with cleaner error handling.",

        "order": 3,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Using the Fetch API",
        "slug": "fetch-api",
        "description": "Explore the fetch API to make HTTP requests and retrieve data from APIs.",

        "order": 4,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Async/Await for Cleaner Async Code",
        "slug": "async-await",
        "description": "Learn async/await syntax to simplify asynchronous JavaScript and improve readability.",

        "order": 5,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Building and Deploying an Async Script",
        "slug": "async-script-deploy",
        "description": "Create an asynchronous JavaScript script to fetch and display API data, then deploy it using Git.",

        "order": 6,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "learningContents": [
      {
        "explanation": "Asynchronous JavaScript allows non-blocking operations, enabling tasks like API calls or timers to run without freezing the UI. JavaScript’s event loop manages asynchronous code, processing tasks in the background. This lesson introduces asynchronous concepts, including the event loop, non-blocking behavior, and their importance in web development. You’ll learn the basics of handling async operations, setting the stage for callbacks, promises, and modern APIs.",
        "examples": [
          "setTimeout(() => console.log('Delayed!'), 1000);",
          "console.log('This runs first'); // Demonstrates non-blocking"
        ],
        "realWorldApplication": "Asynchronous JavaScript powers API data fetching, animations, and real-time updates in web apps like social media feeds.",
        "expertInsights": "Understand the event loop to predict async behavior. Use async tools to avoid blocking the main thread for better UX.",
        "commonMistakes": [
          "Assuming async code runs synchronously, causing logic errors.",
          "Not handling async operations, leading to race conditions."
        ],
        "exercises": [
          {
            "title": "Explore Async Timing",
            "prompt": "Use setTimeout to log a message after 2 seconds and another immediately.",
            "difficulty": "easy",
            "hints": ["Use setTimeout with a callback", "Test in the console"],
            "solution": "setTimeout(() => console.log('Delayed!'), 2000); console.log('Immediate');"
          }
        ],
        "quiz": [
          {
            "question": "What allows JavaScript to handle async operations?",
            "options": ["Event loop", "DOM", "CSS", "Local storage"],
            "correctOption": [0]
          },
          {
            "question": "What is a benefit of asynchronous code?",
            "options": [
              "Blocking UI",
              "Non-blocking UI",
              "Faster compilation",
              "Smaller code"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 30,
        "resources": [
          {
            "title": "MDN — Asynchronous JavaScript",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Callbacks are functions passed as arguments to execute after an async operation completes, enabling task sequencing. They’re foundational for async JavaScript but can lead to callback hell if nested deeply. This lesson covers defining and using callbacks for tasks like timers or event handlers, and managing their flow. You’ll learn to write callback-based async code and test it in the console to ensure correct execution order.",
        "examples": [
          "function fetchData(callback) { setTimeout(() => callback('Data'), 1000); } fetchData(data => console.log(data));",
          "button.addEventListener('click', () => console.log('Clicked')); // Callback for event"
        ],
        "realWorldApplication": "Callbacks are used in event listeners, timers, and legacy APIs for handling async tasks like file loading.",
        "expertInsights": "Avoid deep nesting with callbacks; consider promises for complex flows. Always pass error-first callbacks for robust handling.",
        "commonMistakes": [
          "Not handling callback errors, causing silent failures.",
          "Nesting callbacks excessively, reducing readability."
        ],
        "exercises": [
          {
            "title": "Use a Callback",
            "prompt": "Write a function that uses a callback to log data after a 1-second delay.",
            "difficulty": "easy",
            "hints": [
              "Use setTimeout with a callback",
              "Pass a function as an argument"
            ],
            "solution": "function delayLog(data, callback) { setTimeout(() => callback(data), 1000); } delayLog('Hello', msg => console.log(msg));"
          }
        ],
        "quiz": [
          {
            "question": "What is a callback in JavaScript?",
            "options": [
              "A loop",
              "A function passed as an argument",
              "A variable",
              "An event"
            ],
            "correctOption": [1]
          },
          {
            "question": "What is a drawback of callbacks?",
            "options": [
              "Too fast",
              "Callback hell",
              "No errors",
              "Blocking UI"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 40,
        "resources": [
          {
            "title": "MDN — Callbacks",
            "url": "https://developer.mozilla.org/en-US/docs/Glossary/Callback_function",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Promises represent the eventual completion (or failure) of an async operation, offering a cleaner alternative to callbacks. They have states (pending, fulfilled, rejected) and support chaining with `.then` and `.catch`. This lesson covers creating and consuming promises, handling success and errors, and chaining operations. You’ll learn to use promises for async tasks like API calls and test them in the console for reliability.",
        "examples": [
          "let promise = new Promise((resolve, reject) => setTimeout(() => resolve('Success'), 1000)); promise.then(data => console.log(data));",
          "promise.catch(err => console.log('Error:', err));"
        ],
        "realWorldApplication": "Promises are used for fetching API data, handling timeouts, and coordinating async tasks in web apps.",
        "expertInsights": "Use `.catch` for error handling and chain `.then` for sequential tasks. Avoid mixing promises with callbacks for clarity.",
        "commonMistakes": [
          "Forgetting to handle promise rejections, causing uncaught errors.",
          "Not returning values in `.then`, breaking promise chains."
        ],
        "exercises": [
          {
            "title": "Create a Promise",
            "prompt": "Write a promise that resolves with 'Done' after 1 second and log the result.",
            "difficulty": "medium",
            "hints": [
              "Use new Promise with resolve",
              "Use .then to handle the result"
            ],
            "solution": "let promise = new Promise((resolve) => setTimeout(() => resolve('Done'), 1000)); promise.then(result => console.log(result));"
          }
        ],
        "quiz": [
          {
            "question": "What is a promise’s initial state?",
            "options": ["Fulfilled", "Rejected", "Pending", "Resolved"],
            "correctOption": [2]
          },
          {
            "question": "How do you handle promise errors?",
            "options": [".then", ".catch", ".finally", "try"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 45,
        "resources": [
          {
            "title": "MDN — Promises",
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "The Fetch API provides a modern way to make HTTP requests to APIs, returning promises for handling responses. It supports GET, POST, and other methods, with JSON parsing for data. This lesson covers using `fetch` to retrieve data, handling responses, and managing errors. You’ll learn to fetch data from a public API and display it in the DOM, testing requests in DevTools’ Network tab.",
        "examples": [
          "fetch('https://api.example.com/data').then(res => res.json()).then(data => console.log(data));",
          "fetch('https://api.example.com/data', { method: 'POST', body: JSON.stringify({ key: 'value' }) }).catch(err => console.log(err));"
        ],
        "realWorldApplication": "Fetch is used to retrieve data for weather apps, social media feeds, and e-commerce product listings.",
        "expertInsights": "Always check response status with `res.ok` before parsing. Handle network errors in `.catch` to avoid crashes.",
        "commonMistakes": [
          "Not parsing JSON responses, causing type errors.",
          "Ignoring HTTP status codes, missing failed requests."
        ],
        "exercises": [
          {
            "title": "Fetch API Data",
            "prompt": "Use fetch to retrieve data from a public API and log the result.",
            "difficulty": "medium",
            "hints": [
              "Use a public API like jsonplaceholder.typicode.com",
              "Chain .then to parse JSON"
            ],
            "solution": "fetch('https://jsonplaceholder.typicode.com/posts').then(res => res.json()).then(data => console.log(data));"
          }
        ],
        "quiz": [
          {
            "question": "What does fetch return?",
            "options": ["JSON", "Promise", "Array", "String"],
            "correctOption": [1]
          },
          {
            "question": "How do you parse a fetch response?",
            "options": [".text()", ".json()", ".data()", ".parse()"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 50,
        "resources": [
          {
            "title": "MDN — Fetch API",
            "url": "https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Async/await is a syntax for working with promises, making asynchronous code look synchronous and improving readability. Using `async` declares a function as asynchronous, and `await` pauses execution until a promise resolves. This lesson covers writing async/await functions, handling errors with try/catch, and combining with fetch. You’ll learn to fetch and process API data cleanly, testing in the console for accuracy.",
        "examples": [
          "async function getData() { const res = await fetch('https://api.example.com/data'); const data = await res.json(); console.log(data); }",
          "async function fetchWithError() { try { const res = await fetch('url'); } catch (err) { console.log('Error:', err); } }"
        ],
        "realWorldApplication": "Async/await is used in modern web apps for fetching user data, updating UIs, and handling API responses cleanly.",
        "expertInsights": "Use try/catch for error handling in async functions. Avoid overusing await in loops to prevent performance bottlenecks.",
        "commonMistakes": [
          "Forgetting async keyword, causing await syntax errors.",
          "Not handling errors, leading to uncaught promise rejections."
        ],
        "exercises": [
          {
            "title": "Use Async/Await",
            "prompt": "Write an async function to fetch data from a public API and log it, handling errors with try/catch.",
            "difficulty": "medium",
            "hints": ["Use async/await with fetch", "Wrap in try/catch"],
            "solution": "async function getPosts() { try { const res = await fetch('https://jsonplaceholder.typicode.com/posts'); const data = await res.json(); console.log(data); } catch (err) { console.log('Error:', err); } } getPosts();"
          }
        ],
        "quiz": [
          {
            "question": "What keyword makes a function asynchronous?",
            "options": ["await", "async", "promise", "then"],
            "correctOption": [1]
          },
          {
            "question": "How do you handle errors in async/await?",
            "options": [".catch", "try/catch", ".then", "if/else"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 50,
        "resources": [
          {
            "title": "MDN — Async/Await",
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Building and deploying an asynchronous JavaScript script involves fetching data from an API, processing it, and displaying it in the DOM, then publishing online. This lesson guides you through creating a script using async/await and fetch to display API data (e.g., a list of posts), using Git for version control, and deploying with platforms like GitHub Pages or Vercel. You’ll learn to test async functionality in DevTools, ensure cross-browser compatibility, and maintain clean code.",
        "examples": [
          "<ul id='list'></ul><script>async function displayPosts() { const res = await fetch('https://jsonplaceholder.typicode.com/posts'); const posts = await res.json(); posts.forEach(post => document.getElementById('list').innerHTML += `<li>${post.title}</li>`); } displayPosts();</script>",
          "Deploy a page with async API data to GitHub Pages."
        ],
        "realWorldApplication": "Async scripts power dynamic content like news feeds, product lists, and real-time dashboards in web apps.",
        "expertInsights": "Test API responses in DevTools’ Network tab. Handle loading states and errors for better UX, and commit small changes to Git.",
        "commonMistakes": [
          "Deploying untested async scripts, causing fetch errors.",
          "Not handling API failures, leaving blank UIs."
        ],
        "exercises": [
          {
            "title": "Deploy an Async Script",
            "prompt": "Write an async script to fetch and display a list of posts from an API, then deploy it using GitHub Pages.",
            "difficulty": "medium",
            "hints": ["Use async/await with fetch", "Render data in the DOM"],
            "solution": "HTML: <ul id='list'></ul><script src='script.js'></script>\nJS: async function displayPosts() { try { const res = await fetch('https://jsonplaceholder.typicode.com/posts'); const posts = await res.json(); posts.forEach(post => document.getElementById('list').innerHTML += `<li>${post.title}</li>`); } catch (err) { console.log('Error:', err); } } displayPosts();\nGit: git add ., git commit -m 'Added async script', git push, enable GitHub Pages."
          }
        ],
        "quiz": [
          {
            "question": "Which API is used for HTTP requests?",
            "options": [
              "fetch",
              "XMLHttpRequest",
              "Both a and b",
              "setTimeout"
            ],
            "correctOption": [2]
          },
          {
            "question": "Which platform supports static site deployment?",
            "options": ["MySQL", "Vercel", "MongoDB", "Redis"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 60,
        "resources": [
          {
            "title": "GitHub Pages Documentation",
            "url": "https://docs.github.com/en/pages",
            "type": "doc"
          },
          {
            "title": "Vercel — Deploying Static Sites",
            "url": "https://vercel.com/docs/platform/deployments",
            "type": "doc"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "meta": {
      "generatedAt": "2025-09-16T00:00:00.000Z",
      "version": "1.0"
    }
  },
  {
    "domains": [
      {
        "name": "Web Development",
        "slug": "web-development",
        "description": "Explore modern JavaScript (ES6+) features like arrow functions, modules, destructuring, spread operators, and template strings to write concise and modular code.",
        "courseCount": 1,
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "courses": [
      {
        "title": "Modern JavaScript: ES6+ Features and Best Practices",
        "slug": "js-es6-modern-js",
        "shortDescription": "A beginner-to-intermediate course on ES6+ JavaScript features, including arrow functions, modules, destructuring, spread operators, and template strings.",
        "longDescription": "This course introduces modern JavaScript (ES6+) features that enhance code readability, modularity, and efficiency. You’ll learn arrow functions for concise syntax, modules for code organization, destructuring for simplified data access, spread operators for flexible data manipulation, and template strings for dynamic strings. Through hands-on exercises, real-world examples, and quizzes, you’ll build modular scripts for web applications. The course also covers debugging modern JS code in DevTools and deploying projects, preparing you for contemporary web development workflows.",
        "tags": [
          "javascript",
          "web",
          "es6",
          "modules",
          "destructuring",
          "spread",
          "template-strings",
          "frontend"
        ],
        "thumbnail": "https://example.com/thumbnails/js-es6-modern.jpg",

        "levelSummary": [
          {
            "level": "Beginner to Intermediate",
            "overview": "Master ES6+ JavaScript features to write concise, modular, and maintainable code for modern web applications.",
            "moduleCount": 1
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "modules": [
      {
        "title": "Module 1 — Modern JavaScript with ES6+",
        "slug": "js-es6-modern-js",
        "description": "Learn ES6+ features like arrow functions, modules, destructuring, spread operators, and template strings for modern JavaScript development.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "lessons": [
      {
        "title": "Introduction to ES6+ JavaScript",
        "slug": "intro-es6-js",
        "description": "Understand ES6+ and its impact on modern JavaScript development for cleaner and more efficient code.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Arrow Functions",
        "slug": "arrow-functions",
        "description": "Learn arrow function syntax and use cases for concise and readable function expressions.",

        "order": 2,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "JavaScript Modules",
        "slug": "js-modules",
        "description": "Explore ES6 modules for organizing and reusing code with import and export syntax.",

        "order": 3,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Destructuring Arrays and Objects",
        "slug": "destructuring",
        "description": "Master destructuring to simplify data extraction from arrays and objects.",

        "order": 4,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Spread and Rest Operators",
        "slug": "spread-rest",
        "description": "Learn to use spread and rest operators for flexible data manipulation and function arguments.",

        "order": 5,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Template Strings and Deployment",
        "slug": "template-strings-deploy",
        "description": "Use template strings for dynamic strings and deploy a modern JavaScript project using Git.",

        "order": 6,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "learningContents": [
      {
        "explanation": "ES6 (ECMAScript 2015) and later versions introduced features that make JavaScript more powerful and concise. These include arrow functions, modules, destructuring, spread/rest operators, and template strings, which improve code readability and modularity. This lesson introduces ES6+ features, their benefits, and their role in modern web development. You’ll learn how these features streamline coding tasks and set the foundation for exploring each in detail.",
        "examples": [
          "const add = (a, b) => a + b; // Arrow function",
          "`Hello, ${name}!`; // Template string"
        ],
        "realWorldApplication": "ES6+ features are used in modern frameworks like React and Vue for concise, modular, and maintainable code.",
        "expertInsights": "Adopt ES6+ for cleaner code but ensure browser compatibility with tools like Babel. Use polyfills for older environments.",
        "commonMistakes": [
          "Mixing ES6+ and older syntax, causing inconsistencies.",
          "Not understanding feature scope, leading to errors in older browsers."
        ],
        "exercises": [
          {
            "title": "Explore ES6+ Syntax",
            "prompt": "Write an arrow function and a template string, then log the result.",
            "difficulty": "easy",
            "hints": [
              "Use => for arrow functions",
              "Use backticks for template strings"
            ],
            "solution": "const greet = name => `Hello, ${name}!`; console.log(greet('Alice'));"
          }
        ],
        "quiz": [
          {
            "question": "What does ES6 stand for?",
            "options": [
              "ECMAScript 6",
              "Extended Script 6",
              "Enhanced JavaScript 6",
              "ECMA Standard 6"
            ],
            "correctOption": [0]
          },
          {
            "question": "Which feature improves code modularity?",
            "options": [
              "Arrow functions",
              "Modules",
              "Template strings",
              "Destructuring"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 30,
        "resources": [
          {
            "title": "MDN — ECMAScript 2015 (ES6)",
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction#ecmascript_2015_es6_and_beyond",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Arrow functions provide a concise syntax for function expressions and automatically bind `this` to the surrounding context. They’re ideal for callbacks and short functions but lack their own `this` or `arguments`. This lesson covers arrow function syntax, use cases (e.g., array methods), and limitations. You’ll learn to write and test arrow functions in the console, ensuring proper usage in web applications.",
        "examples": [
          "const add = (a, b) => a + b; console.log(add(2, 3)); // 5",
          "[1, 2, 3].map(num => num * 2); // [2, 4, 6]"
        ],
        "realWorldApplication": "Arrow functions are used in event listeners, array methods, and React components for concise, readable code.",
        "expertInsights": "Use arrow functions for callbacks but avoid them in object methods needing `this`. Test `this` behavior in DevTools.",
        "commonMistakes": [
          "Using arrow functions in methods needing dynamic `this`, causing errors.",
          "Forgetting to return values in single-line arrow functions."
        ],
        "exercises": [
          {
            "title": "Write an Arrow Function",
            "prompt": "Create an arrow function to double a number and use it in a map method.",
            "difficulty": "easy",
            "hints": ["Use => syntax", "Apply to an array with map"],
            "solution": "const double = num => num * 2; console.log([1, 2, 3].map(double)); // [2, 4, 6]"
          }
        ],
        "quiz": [
          {
            "question": "What is the syntax for an arrow function?",
            "options": ["function() {}", "() => {}", "=> {}", "func() {}"],
            "correctOption": [1]
          },
          {
            "question": "What do arrow functions lack?",
            "options": ["Return statement", "Own this", "Parameters", "Scope"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 40,
        "resources": [
          {
            "title": "MDN — Arrow Functions",
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "ES6 modules allow code organization by splitting logic into reusable files using `import` and `export` syntax. They promote modularity and encapsulation, critical for large-scale apps. This lesson covers creating modules, exporting/importing functions or variables, and using them in scripts. You’ll learn to structure a project with modules and test imports in a browser environment with type='module'.",
        "examples": [
          "// math.js: export const add = (a, b) => a + b;",
          "// main.js: import { add } from './math.js'; console.log(add(2, 3));"
        ],
        "realWorldApplication": "Modules are used in frameworks like React and Node.js to organize components, utilities, and services.",
        "expertInsights": "Use named exports for clarity and default exports for single values. Ensure `type='module'` in HTML for browser support.",
        "commonMistakes": [
          "Forgetting `type='module'` in script tags, causing import errors.",
          "Incorrect file paths in imports, breaking module loading."
        ],
        "exercises": [
          {
            "title": "Create a Module",
            "prompt": "Create a module exporting a function and import it in another file to log a result.",
            "difficulty": "medium",
            "hints": ["Use export in one file", "Use import with correct path"],
            "solution": "math.js: export const multiply = (a, b) => a * b;\nmain.js: import { multiply } from './math.js'; console.log(multiply(2, 3)); // 6\nHTML: <script type='module' src='main.js'></script>"
          }
        ],
        "quiz": [
          {
            "question": "How do you export a function in a module?",
            "options": [
              "export function",
              "module.exports",
              "function export",
              "export default"
            ],
            "correctOption": [0, 3]
          },
          {
            "question": "What attribute enables module imports in HTML?",
            "options": [
              "type='module'",
              "src='module'",
              "type='import'",
              "module='true'"
            ],
            "correctOption": [0]
          }
        ],
        "estimatedTime": 45,
        "resources": [
          {
            "title": "MDN — JavaScript Modules",
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Destructuring simplifies extracting data from arrays or objects into variables, reducing boilerplate code. It’s widely used in function parameters and variable assignments. This lesson covers destructuring syntax for arrays and objects, including nested destructuring and default values. You’ll learn to apply destructuring in scripts, such as extracting API response data, and test it in the console for accuracy.",
        "examples": [
          "const { name, age } = { name: 'Alice', age: 25 }; console.log(name); // Alice",
          "const [first, second] = [1, 2, 3]; console.log(first); // 1"
        ],
        "realWorldApplication": "Destructuring is used in React props, API data processing, and configuration objects for cleaner code.",
        "expertInsights": "Use destructuring in function parameters for concise code. Provide default values to handle undefined properties.",
        "commonMistakes": [
          "Destructuring non-existent properties, causing undefined errors.",
          "Using incorrect syntax for arrays vs. objects."
        ],
        "exercises": [
          {
            "title": "Destructure an Object",
            "prompt": "Destructure an object to extract name and age, then log them.",
            "difficulty": "medium",
            "hints": [
              "Use curly braces for objects",
              "Ensure property names match"
            ],
            "solution": "const user = { name: 'Bob', age: 30 }; const { name, age } = user; console.log(name, age); // Bob 30"
          }
        ],
        "quiz": [
          {
            "question": "What syntax destructures an object?",
            "options": ["[]", "{}", "()", "<>"],
            "correctOption": [1]
          },
          {
            "question": "What happens when destructuring a missing property?",
            "options": ["Error", "Undefined", "Null", "Empty string"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 40,
        "resources": [
          {
            "title": "MDN — Destructuring Assignment",
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Spread and rest operators (`...`) handle arrays, objects, and function arguments flexibly. Spread expands elements or properties, while rest collects remaining items or arguments. This lesson covers using spread to copy or merge data and rest for variable-length arguments. You’ll learn to apply these operators in tasks like array concatenation or function parameter handling, testing in the console for correctness.",
        "examples": [
          "const arr1 = [1, 2]; const arr2 = [...arr1, 3]; console.log(arr2); // [1, 2, 3]",
          "function sum(...numbers) { return numbers.reduce((a, b) => a + b); } console.log(sum(1, 2, 3)); // 6"
        ],
        "realWorldApplication": "Spread is used for array/object cloning and merging in React state updates; rest is used for flexible function arguments.",
        "expertInsights": "Use spread for shallow copies; deep cloning requires additional logic. Use rest in functions to handle dynamic inputs.",
        "commonMistakes": [
          "Using spread on non-iterables, causing errors.",
          "Confusing spread and rest, leading to incorrect data handling."
        ],
        "exercises": [
          {
            "title": "Use Spread and Rest",
            "prompt": "Merge two arrays using spread and create a function with rest to sum numbers.",
            "difficulty": "medium",
            "hints": [
              "Use ... for spread and rest",
              "Test rest with multiple arguments"
            ],
            "solution": "const arr1 = [1, 2]; const arr2 = [...arr1, 3, 4]; console.log(arr2); function sum(...nums) { return nums.reduce((a, b) => a + b); } console.log(sum(1, 2, 3));"
          }
        ],
        "quiz": [
          {
            "question": "What does the spread operator do?",
            "options": [
              "Collects arguments",
              "Expands arrays/objects",
              "Reduces arrays",
              "Filters data"
            ],
            "correctOption": [1]
          },
          {
            "question": "What is the rest operator used for?",
            "options": [
              "Copying arrays",
              "Merging objects",
              "Collecting arguments",
              "Splitting strings"
            ],
            "correctOption": [2]
          }
        ],
        "estimatedTime": 45,
        "resources": [
          {
            "title": "MDN — Spread Syntax",
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Template strings (template literals) use backticks (`) for dynamic string creation with embedded expressions, improving readability over concatenation. This lesson covers template string syntax, embedding variables, and multiline strings, combined with deploying a modern JS project using ES6+ features. You’ll learn to create a script with template strings, modules, and other ES6+ features, deploy it with Git, and test in DevTools for cross-browser compatibility.",
        "examples": [
          "const name = 'Alice'; console.log(`Hello, ${name}!`); // Hello, Alice!",
          "<div>${data.map(item => `<p>${item}</p>`).join('')}</div> // Dynamic HTML"
        ],
        "realWorldApplication": "Template strings are used in React JSX, API data rendering, and dynamic HTML generation in web apps.",
        "expertInsights": "Use template strings for readable string interpolation. Combine with modules for organized code and test in modern browsers.",
        "commonMistakes": [
          "Using single/double quotes instead of backticks, causing syntax errors.",
          "Not deploying with proper module support, breaking imports."
        ],
        "exercises": [
          {
            "title": "Deploy a Modern JS Script",
            "prompt": "Create a script using template strings and modules to display data, then deploy it using GitHub Pages.",
            "difficulty": "medium",
            "hints": [
              "Use backticks for template strings",
              "Include type='module' in HTML"
            ],
            "solution": "data.js: export const items = ['Item1', 'Item2'];\nmain.js: import { items } from './data.js'; document.querySelector('div').innerHTML = `<ul>${items.map(item => `<li>${item}</li>`).join('')}</ul>`;\nHTML: <div></div><script type='module' src='main.js'></script>\nGit: git add ., git commit -m 'Added modern JS script', git push, enable GitHub Pages."
          }
        ],
        "quiz": [
          {
            "question": "What character defines template strings?",
            "options": ["'", "\"", "`", "$"],
            "correctOption": [2]
          },
          {
            "question": "Which platform supports static site deployment?",
            "options": ["MySQL", "Vercel", "MongoDB", "Redis"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 60,
        "resources": [
          {
            "title": "MDN — Template Literals",
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals",
            "type": "article"
          },
          {
            "title": "GitHub Pages Documentation",
            "url": "https://docs.github.com/en/pages",
            "type": "doc"
          },
          {
            "title": "Vercel — Deploying Static Sites",
            "url": "https://vercel.com/docs/platform/deployments",
            "type": "doc"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "meta": {
      "generatedAt": "2025-09-16T00:00:00.000Z",
      "version": "1.0"
    }
  },
  {
    "domains": [
      {
        "name": "Web Development",
        "slug": "web-development",
        "description": "Master debugging, tooling, and build basics in JavaScript, including advanced DevTools usage, bundler overviews, and linting for robust code.",
        "courseCount": 1,
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "courses": [
      {
        "title": "JavaScript Debugging, Tooling & Build Basics",
        "slug": "js-debugging-tooling-build",
        "shortDescription": "A beginner-to-intermediate course on debugging with DevTools, understanding bundlers, and implementing linting for JavaScript projects.",
        "longDescription": "This course explores debugging, tooling, and build processes in JavaScript to improve code quality and development efficiency. You’ll learn to use browser DevTools for advanced debugging, understand bundlers like Webpack or Vite, and apply linting with tools like ESLint for consistent code. Through hands-on exercises, real-world examples, and quizzes, you’ll debug scripts, set up basic build pipelines, and optimize workflows. The course also covers deploying projects with build tools, preparing you for professional JavaScript development.",
        "tags": [
          "javascript",
          "web",
          "debugging",
          "devtools",
          "bundlers",
          "linting",
          "frontend"
        ],
        "thumbnail": "https://example.com/thumbnails/js-debugging-tooling.jpg",

        "levelSummary": [
          {
            "level": "Beginner to Intermediate",
            "overview": "Learn advanced debugging with DevTools, explore bundlers, and implement linting for efficient JavaScript development.",
            "moduleCount": 1
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "modules": [
      {
        "title": "Module 1 — Debugging, Tooling, and Build Basics",
        "slug": "js-debugging-tooling-build",
        "description": "Master debugging with DevTools, understand bundlers, and apply linting to create robust JavaScript projects.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "lessons": [
      {
        "title": "Introduction to Debugging and Tooling",
        "slug": "intro-debugging-tooling",
        "description": "Understand the role of debugging and tooling in JavaScript for building reliable web applications.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Advanced DevTools Debugging",
        "slug": "advanced-devtools",
        "description": "Learn advanced techniques in browser DevTools for debugging JavaScript code effectively.",

        "order": 2,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Introduction to JavaScript Bundlers",
        "slug": "js-bundlers",
        "description": "Explore JavaScript bundlers like Webpack and Vite for managing and optimizing code.",

        "order": 3,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Linting with ESLint",
        "slug": "eslint-linting",
        "description": "Learn to use ESLint for code quality and consistency in JavaScript projects.",

        "order": 4,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Setting Up a Basic Build Pipeline",
        "slug": "build-pipeline",
        "description": "Understand how to set up a basic build pipeline using bundlers for JavaScript projects.",

        "order": 5,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Debugging and Deploying a Built Project",
        "slug": "debug-deploy-build",
        "description": "Debug a JavaScript project with DevTools and deploy it using a build pipeline and Git.",

        "order": 6,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "learningContents": [
      {
        "explanation": "Debugging and tooling are critical for identifying and fixing issues in JavaScript code, while build processes optimize projects for production. Browser DevTools, bundlers, and linters streamline development workflows. This lesson introduces debugging with DevTools, the role of bundlers like Webpack, and linting with ESLint. You’ll learn the basics of setting up a development environment and testing tools in a simple project.",
        "examples": [
          "console.log('Debugging with DevTools'); // View in Console tab",
          "npm init -y && npm install eslint --save-dev // Initialize ESLint"
        ],
        "realWorldApplication": "Debugging and tooling are used in professional web development to ensure robust, maintainable, and optimized codebases.",
        "expertInsights": "Use DevTools for runtime debugging and linters for static analysis. Start with simple build tools to avoid complexity.",
        "commonMistakes": [
          "Ignoring DevTools errors, leading to unresolved bugs.",
          "Overcomplicating build setups without understanding requirements."
        ],
        "exercises": [
          {
            "title": "Explore DevTools",
            "prompt": "Open DevTools and log a message to the console, then inspect it.",
            "difficulty": "easy",
            "hints": ["Use console.log", "Check the Console tab"],
            "solution": "console.log('Hello DevTools!'); // Open DevTools and check Console"
          }
        ],
        "quiz": [
          {
            "question": "What is the primary tool for browser debugging?",
            "options": ["VS Code", "DevTools", "Node.js", "Git"],
            "correctOption": [1]
          },
          {
            "question": "What does a linter do?",
            "options": [
              "Bundles code",
              "Checks code quality",
              "Runs tests",
              "Deploys apps"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 30,
        "resources": [
          {
            "title": "MDN — Debugging JavaScript",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/How_to_debug",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Browser DevTools offer advanced features like breakpoints, call stack inspection, and performance profiling to debug JavaScript effectively. These tools help trace errors, inspect variables, and optimize code. This lesson covers setting breakpoints, using the Sources panel, and analyzing runtime issues. You’ll learn to debug a script with errors, such as undefined variables or failed loops, and verify fixes in DevTools.",
        "examples": [
          "let x; console.log(x.toString()); // Set breakpoint to catch undefined error",
          "Use DevTools Sources to step through a loop"
        ],
        "realWorldApplication": "DevTools debugging is used to fix issues in dynamic web apps, like broken event listeners or API failures.",
        "expertInsights": "Use conditional breakpoints for specific cases. Log objects with `console.dir` for detailed inspection.",
        "commonMistakes": [
          "Not using breakpoints, relying solely on console logs.",
          "Ignoring call stack, missing error sources."
        ],
        "exercises": [
          {
            "title": "Debug with Breakpoints",
            "prompt": "Write a script with an undefined variable error and use DevTools to debug it.",
            "difficulty": "medium",
            "hints": ["Set a breakpoint in Sources", "Check variable values"],
            "solution": "let x; console.log(x.length); // Set breakpoint in DevTools Sources to catch undefined error"
          }
        ],
        "quiz": [
          {
            "question": "Which DevTools panel is used for breakpoints?",
            "options": ["Console", "Sources", "Network", "Performance"],
            "correctOption": [1]
          },
          {
            "question": "What does console.dir do?",
            "options": [
              "Logs strings",
              "Inspects objects",
              "Clears console",
              "Runs code"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 45,
        "resources": [
          {
            "title": "MDN — Debugging with DevTools",
            "url": "https://developer.mozilla.org/en-US/docs/Tools/Debugger",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "JavaScript bundlers like Webpack, Vite, or Parcel combine and optimize code, handling modules, assets, and dependencies for production. They enable ES6 module usage and minification. This lesson covers the basics of bundlers, their configuration, and their role in modern workflows. You’ll learn to set up a simple bundler configuration and test bundled output in a browser.",
        "examples": [
          "// webpack.config.js: module.exports = { entry: './src/index.js', output: { filename: 'bundle.js' } };",
          "npm run build // Run bundler to generate output"
        ],
        "realWorldApplication": "Bundlers are used in React, Vue, and other frameworks to optimize and package code for deployment.",
        "expertInsights": "Start with Vite for simplicity or Webpack for customization. Use source maps for easier debugging of bundled code.",
        "commonMistakes": [
          "Misconfiguring entry/output paths, causing build failures.",
          "Not using source maps, complicating debugging."
        ],
        "exercises": [
          {
            "title": "Set Up a Bundler",
            "prompt": "Create a simple Vite project and bundle a JavaScript file with a module import.",
            "difficulty": "medium",
            "hints": [
              "Use npm create vite@latest",
              "Import a module in index.js"
            ],
            "solution": "Run: npm create vite@latest my-app -- --template vanilla\nindex.js: import { greet } from './greet.js'; console.log(greet());\ngreet.js: export const greet = () => 'Hello!';"
          }
        ],
        "quiz": [
          {
            "question": "What does a bundler do?",
            "options": [
              "Debugs code",
              "Combines code",
              "Lints code",
              "Deploys apps"
            ],
            "correctOption": [1]
          },
          {
            "question": "Which tool is a popular bundler?",
            "options": ["ESLint", "Vite", "Git", "Node.js"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 50,
        "resources": [
          {
            "title": "Vite Documentation",
            "url": "https://vitejs.dev/guide/",
            "type": "doc"
          },
          {
            "title": "Webpack Documentation",
            "url": "https://webpack.js.org/concepts/",
            "type": "doc"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Linting with ESLint ensures code quality by enforcing style rules and catching potential errors before runtime. It supports ES6+ and custom configurations. This lesson covers setting up ESLint, configuring rules, and integrating it into a project. You’ll learn to lint a JavaScript file, fix issues like inconsistent formatting or unused variables, and verify results in a code editor or terminal.",
        "examples": [
          "npm init @eslint/config // Set up ESLint",
          "// .eslintrc.json: { 'env': { 'browser': true }, 'rules': { 'semi': ['error', 'always'] } }"
        ],
        "realWorldApplication": "Linting is used in team projects to maintain consistent codebases and catch errors in frameworks like React.",
        "expertInsights": "Use popular ESLint configs like Airbnb for standards. Integrate with editors for real-time feedback.",
        "commonMistakes": [
          "Ignoring linting errors, leading to inconsistent code.",
          "Overriding rules without understanding their purpose."
        ],
        "exercises": [
          {
            "title": "Lint a JavaScript File",
            "prompt": "Set up ESLint and lint a file with a missing semicolon error.",
            "difficulty": "medium",
            "hints": ["Use npm init @eslint/config", "Enable semi rule"],
            "solution": "Run: npm init @eslint/config\n.eslintrc.json: { 'env': { 'browser': true }, 'rules': { 'semi': ['error', 'always'] } }\nindex.js: let x = 1 // Add semicolon to fix lint error"
          }
        ],
        "quiz": [
          {
            "question": "What does ESLint check?",
            "options": [
              "Code performance",
              "Code style and errors",
              "Network requests",
              "DOM structure"
            ],
            "correctOption": [1]
          },
          {
            "question": "How do you initialize ESLint?",
            "options": [
              "npm install eslint",
              "npm init @eslint/config",
              "npm run lint",
              "npm eslint"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 45,
        "resources": [
          {
            "title": "ESLint Documentation",
            "url": "https://eslint.org/docs/latest/user-guide/getting-started",
            "type": "doc"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "A build pipeline automates tasks like bundling, minification, and linting to prepare code for production. Tools like Vite or Webpack streamline this process. This lesson covers setting up a basic pipeline with a bundler, including scripts for development and production. You’ll learn to configure a build process, test the output, and verify functionality in a browser environment.",
        "examples": [
          "// package.json: { 'scripts': { 'build': 'vite build', 'dev': 'vite' } }",
          "Run: npm run build // Generate production bundle"
        ],
        "realWorldApplication": "Build pipelines are used in professional web development to optimize apps for performance and deployment.",
        "expertInsights": "Keep build configs simple initially. Use watch modes for development and minification for production.",
        "commonMistakes": [
          "Not testing builds, causing broken production code.",
          "Including unnecessary dependencies, bloating bundles."
        ],
        "exercises": [
          {
            "title": "Set Up a Build Pipeline",
            "prompt": "Create a Vite project with a build script and generate a production bundle.",
            "difficulty": "medium",
            "hints": [
              "Use npm create vite@latest",
              "Add build script to package.json"
            ],
            "solution": "Run: npm create vite@latest my-app -- --template vanilla\npackage.json: { 'scripts': { 'build': 'vite build', 'dev': 'vite' } }\nRun: npm run build"
          }
        ],
        "quiz": [
          {
            "question": "What does a build pipeline do?",
            "options": [
              "Debugs code",
              "Optimizes code for production",
              "Lints code",
              "Deploys apps"
            ],
            "correctOption": [1]
          },
          {
            "question": "Which tool is used for build pipelines?",
            "options": ["ESLint", "Vite", "Git", "DevTools"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 50,
        "resources": [
          {
            "title": "Vite — Build Guide",
            "url": "https://vitejs.dev/guide/build.html",
            "type": "doc"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Debugging and deploying a built JavaScript project involves using DevTools to ensure functionality and deploying with a build pipeline. This lesson guides you through creating a script with ES6+ features, debugging it with DevTools, and deploying the bundled output using Git and platforms like GitHub Pages or Vercel. You’ll learn to verify build outputs, test in browsers, and maintain clean workflows.",
        "examples": [
          "<script type='module' src='index.js'></script> // Debug in DevTools, then build and deploy",
          "Run: npm run build && git add . && git commit -m 'Deploy build' && git push"
        ],
        "realWorldApplication": "Debugging and build pipelines ensure reliable, optimized web apps, like dashboards or e-commerce sites.",
        "expertInsights": "Test builds in multiple browsers. Use source maps in DevTools to debug minified code effectively.",
        "commonMistakes": [
          "Deploying without debugging, causing runtime errors.",
          "Not using source maps, complicating debugging of built code."
        ],
        "exercises": [
          {
            "title": "Deploy a Built Project",
            "prompt": "Create a script with a module, debug it in DevTools, build it with Vite, and deploy to GitHub Pages.",
            "difficulty": "medium",
            "hints": [
              "Use type='module' in HTML",
              "Run npm run build before deploying"
            ],
            "solution": "index.js: import { greet } from './greet.js'; console.log(greet());\ngreet.js: export const greet = () => 'Hello!';\nHTML: <script type='module' src='index.js'></script>\nRun: npm run build\nGit: git add ., git commit -m 'Deployed built project', git push, enable GitHub Pages"
          }
        ],
        "quiz": [
          {
            "question": "What helps debug minified code?",
            "options": [
              "Console logs",
              "Source maps",
              "Linters",
              "Network tab"
            ],
            "correctOption": [1]
          },
          {
            "question": "Which platform supports static site deployment?",
            "options": ["MySQL", "Vercel", "MongoDB", "Redis"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 60,
        "resources": [
          {
            "title": "GitHub Pages Documentation",
            "url": "https://docs.github.com/en/pages",
            "type": "doc"
          },
          {
            "title": "Vercel — Deploying Static Sites",
            "url": "https://vercel.com/docs/platform/deployments",
            "type": "doc"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "meta": {
      "generatedAt": "2025-09-16T00:00:00.000Z",
      "version": "1.0"
    }
  },
  {
    "domains": [
      {
        "name": "Web Development",
        "slug": "web-development",
        "description": "Apply JavaScript skills to build small interactive apps, polish them for production, and deploy them as a final capstone project.",
        "courseCount": 1,
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "courses": [
      {
        "title": "JavaScript Mini Projects & Capstone",
        "slug": "js-mini-projects-capstone",
        "shortDescription": "A beginner-to-intermediate course on building small interactive JavaScript apps, polishing them, and deploying a capstone project.",
        "longDescription": "This course focuses on applying JavaScript skills to create small interactive web applications, refine them with best practices, and deploy a polished capstone project. You’ll build projects like a to-do list or weather app, incorporating DOM manipulation, async JavaScript, and ES6+ features. Through hands-on exercises, real-world examples, and quizzes, you’ll learn to debug, optimize, and deploy projects using tools like Git and Vercel. The course culminates in a capstone project, preparing you for real-world JavaScript development.",
        "tags": [
          "javascript",
          "web",
          "projects",
          "capstone",
          "deploy",
          "frontend"
        ],
        "thumbnail": "https://example.com/thumbnails/js-mini-projects.jpg",

        "levelSummary": [
          {
            "level": "Beginner to Intermediate",
            "overview": "Build and deploy small interactive JavaScript apps, culminating in a polished capstone project.",
            "moduleCount": 1
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "modules": [
      {
        "title": "Module 1 — Mini Projects & Capstone",
        "slug": "js-mini-projects-capstone",
        "description": "Develop small interactive JavaScript apps, refine them, and deploy a capstone project showcasing your skills.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "lessons": [
      {
        "title": "Introduction to JavaScript Projects",
        "slug": "intro-js-projects",
        "description": "Understand the process of building and deploying interactive JavaScript applications.",

        "order": 1,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Building a To-Do List App",
        "slug": "todo-list-app",
        "description": "Create a to-do list app using DOM manipulation and event listeners.",

        "order": 2,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Building a Weather App",
        "slug": "weather-app",
        "description": "Develop a weather app using async JavaScript and an external API.",

        "order": 3,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Polishing Projects with Best Practices",
        "slug": "polish-projects",
        "description": "Apply best practices like linting, modular code, and accessibility to refine projects.",

        "order": 4,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Debugging and Testing Projects",
        "slug": "debug-test-projects",
        "description": "Debug and test JavaScript projects using DevTools and basic testing techniques.",

        "order": 5,

        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "title": "Capstone Project and Deployment",
        "slug": "capstone-deploy",
        "description": "Build and deploy a capstone JavaScript project combining all learned skills.",

        "order": 6,

        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "learningContents": [
      {
        "explanation": "Building small JavaScript projects consolidates skills like DOM manipulation, async programming, and ES6+ features. These projects involve planning, coding, debugging, and deploying interactive apps. This lesson introduces the project-building process, including selecting appropriate tools and structuring code for scalability. You’ll learn the workflow for creating, testing, and deploying web apps, setting the stage for hands-on mini projects.",
        "examples": [
          "Plan a to-do list app: HTML for structure, CSS for styling, JS for interactivity.",
          "Use Git for version control: git init, git add ., git commit -m 'Initial commit'"
        ],
        "realWorldApplication": "Mini projects like to-do lists or weather apps mirror real-world web apps, such as task managers or dashboards.",
        "expertInsights": "Break projects into small, manageable tasks. Use version control from the start for collaboration and rollback.",
        "commonMistakes": [
          "Not planning project structure, leading to disorganized code.",
          "Skipping debugging, causing runtime issues in deployed apps."
        ],
        "exercises": [
          {
            "title": "Plan a Project",
            "prompt": "Outline the structure for a simple to-do list app, including HTML, CSS, and JS files.",
            "difficulty": "easy",
            "hints": [
              "List key features like add/remove tasks",
              "Plan file structure"
            ],
            "solution": "index.html: <ul id='tasks'></ul><input id='input'><button>Add</button>\nstyle.css: Styling for tasks\nscript.js: Add event listeners for adding tasks"
          }
        ],
        "quiz": [
          {
            "question": "What is a key step before coding a project?",
            "options": ["Deploying", "Planning", "Debugging", "Linting"],
            "correctOption": [1]
          },
          {
            "question": "Why use version control in projects?",
            "options": [
              "Styling",
              "Track changes",
              "Optimize code",
              "Run tests"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 30,
        "resources": [
          {
            "title": "MDN — Web Development Projects",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "A to-do list app is a practical project to practice DOM manipulation and event listeners. Users can add, remove, or mark tasks as complete, with data stored in memory or local storage. This lesson covers building a to-do list app, including capturing input, updating the DOM, and handling events. You’ll learn to create a functional app and test it in the browser for interactivity.",
        "examples": [
          "<ul id='tasks'></ul><input id='input'><button onclick='addTask()'>Add</button><script>function addTask() { let li = document.createElement('li'); li.textContent = document.getElementById('input').value; document.getElementById('tasks').appendChild(li); }</script>",
          "Add delete button: li.innerHTML += '<button onclick=\"this.parentElement.remove()\">Delete</button>'"
        ],
        "realWorldApplication": "To-do list apps are used in task management tools like Trello or Todoist for organizing tasks.",
        "expertInsights": "Use event delegation for dynamic elements like task buttons. Persist data with localStorage for better UX.",
        "commonMistakes": [
          "Not clearing input after adding a task, causing confusion.",
          "Attaching individual listeners to dynamic elements, reducing performance."
        ],
        "exercises": [
          {
            "title": "Build a To-Do List",
            "prompt": "Create a to-do list app that adds tasks from an input to a list.",
            "difficulty": "medium",
            "hints": [
              "Use createElement and appendChild",
              "Listen for button clicks"
            ],
            "solution": "<ul id='tasks'></ul><input id='input'><button onclick='addTask()'>Add</button><script>function addTask() { let input = document.getElementById('input'); if (input.value) { let li = document.createElement('li'); li.textContent = input.value; document.getElementById('tasks').appendChild(li); input.value = ''; } }</script>"
          }
        ],
        "quiz": [
          {
            "question": "How do you add a new task to the DOM?",
            "options": [
              "setAttribute",
              "createElement",
              "innerHTML",
              "Both b and c"
            ],
            "correctOption": [3]
          },
          {
            "question": "What improves performance for dynamic elements?",
            "options": [
              "Multiple listeners",
              "Event delegation",
              "Inline styles",
              "Global variables"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 45,
        "resources": [
          {
            "title": "MDN — DOM Manipulation",
            "url": "https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "A weather app fetches data from an API and displays it dynamically, combining async JavaScript, DOM updates, and ES6+ features. This lesson covers building a weather app using the Fetch API, async/await, and template strings to show weather data. You’ll learn to handle API responses, update the UI, and test the app in the browser for functionality.",
        "examples": [
          "<div id='weather'></div><script>async function getWeather() { const res = await fetch('https://api.openweathermap.org/data/2.5/weather?q=London&appid=your_key'); const data = await res.json(); document.getElementById('weather').innerHTML = `<p>${data.main.temp}°C</p>`; } getWeather();</script>",
          "Handle errors: try { await fetch(...) } catch { display error }"
        ],
        "realWorldApplication": "Weather apps are used in travel, fitness, and news platforms for real-time data display.",
        "expertInsights": "Validate API keys and handle errors gracefully. Use loading states for better UX during API calls.",
        "commonMistakes": [
          "Not handling API errors, causing blank UIs.",
          "Using hardcoded API keys, risking security."
        ],
        "exercises": [
          {
            "title": "Build a Weather App",
            "prompt": "Create a weather app that fetches and displays temperature from a public API.",
            "difficulty": "medium",
            "hints": [
              "Use async/await with fetch",
              "Update DOM with template strings"
            ],
            "solution": "<div id='weather'></div><script>async function getWeather() { try { const res = await fetch('https://api.openweathermap.org/data/2.5/weather?q=London&appid=your_key'); const data = await res.json(); document.getElementById('weather').innerHTML = `<p>${data.main.temp}°C</p>`; } catch { document.getElementById('weather').innerHTML = 'Error fetching data'; } } getWeather();</script>"
          }
        ],
        "quiz": [
          {
            "question": "What API is used for fetching weather data?",
            "options": ["DOM API", "Fetch API", "LocalStorage", "Event API"],
            "correctOption": [1]
          },
          {
            "question": "How do you handle fetch errors?",
            "options": [".then", "try/catch", ".catch", "Both b and c"],
            "correctOption": [3]
          }
        ],
        "estimatedTime": 50,
        "resources": [
          {
            "title": "MDN — Fetch API",
            "url": "https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Polishing projects involves applying best practices like linting, modular code, and accessibility to ensure production-ready apps. Tools like ESLint and ES6 modules enhance code quality, while ARIA attributes improve accessibility. This lesson covers refining a project with these practices, testing for usability, and optimizing performance. You’ll learn to polish a to-do or weather app for better maintainability and user experience.",
        "examples": [
          "// .eslintrc.json: { 'rules': { 'semi': ['error', 'always'] } } // Enforce semicolons",
          "<button aria-label='Add task'>Add</button> // Improve accessibility"
        ],
        "realWorldApplication": "Polished projects ensure reliable, accessible apps, like e-commerce platforms or productivity tools.",
        "expertInsights": "Run ESLint regularly and use semantic HTML. Test accessibility with tools like Lighthouse in DevTools.",
        "commonMistakes": [
          "Skipping linting, leading to inconsistent code.",
          "Ignoring accessibility, reducing usability for some users."
        ],
        "exercises": [
          {
            "title": "Polish a Project",
            "prompt": "Add ESLint and an ARIA label to a to-do list app, then fix any linting errors.",
            "difficulty": "medium",
            "hints": [
              "Use npm init @eslint/config",
              "Add aria-label to buttons"
            ],
            "solution": "Run: npm init @eslint/config\n.eslintrc.json: { 'env': { 'browser': true }, 'rules': { 'semi': ['error', 'always'] } }\nHTML: <button aria-label='Add task'>Add</button><script>let x = 1; // Fixed lint error</script>"
          }
        ],
        "quiz": [
          {
            "question": "What improves project accessibility?",
            "options": [
              "CSS animations",
              "ARIA attributes",
              "Inline styles",
              "Global variables"
            ],
            "correctOption": [1]
          },
          {
            "question": "What does ESLint enforce?",
            "options": ["Code style", "Performance", "Deployment", "Testing"],
            "correctOption": [0]
          }
        ],
        "estimatedTime": 45,
        "resources": [
          {
            "title": "MDN — Accessibility",
            "url": "https://developer.mozilla.org/en-US/docs/Web/Accessibility",
            "type": "article"
          },
          {
            "title": "ESLint Documentation",
            "url": "https://eslint.org/docs/latest/user-guide/getting-started",
            "type": "doc"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "Debugging and testing ensure projects are reliable before deployment. DevTools helps identify issues like broken event listeners or API errors, while basic testing validates functionality. This lesson covers debugging project code with breakpoints and console logs, and writing simple tests for key features. You’ll learn to test a project’s functionality in DevTools and ensure robustness across browsers.",
        "examples": [
          "console.log('Task added:', task); // Debug task addition",
          "Test: if (addTask('Test')) console.log('Task added successfully');"
        ],
        "realWorldApplication": "Debugging and testing are critical for ensuring apps like dashboards or forms work reliably in production.",
        "expertInsights": "Use DevTools’ Sources panel for breakpoints. Write simple unit tests for critical functions to catch errors early.",
        "commonMistakes": [
          "Not testing edge cases, causing unexpected failures.",
          "Ignoring browser compatibility, breaking functionality."
        ],
        "exercises": [
          {
            "title": "Debug a Project",
            "prompt": "Debug a to-do list app with a failing addTask function using DevTools breakpoints.",
            "difficulty": "medium",
            "hints": ["Set a breakpoint in Sources", "Check input values"],
            "solution": "<ul id='tasks'></ul><input id='input'><button onclick='addTask()'>Add</button><script>function addTask() { let input = document.getElementById('input'); console.log(input.value); let li = document.createElement('li'); li.textContent = input.value; document.getElementById('tasks').appendChild(li); } // Set breakpoint on console.log</script>"
          }
        ],
        "quiz": [
          {
            "question": "Which DevTools panel is used for debugging?",
            "options": ["Console", "Sources", "Network", "Performance"],
            "correctOption": [1]
          },
          {
            "question": "Why test edge cases?",
            "options": [
              "Improve styling",
              "Catch errors",
              "Optimize code",
              "Deploy faster"
            ],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 45,
        "resources": [
          {
            "title": "MDN — Debugging JavaScript",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/How_to_debug",
            "type": "article"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      },
      {
        "explanation": "The capstone project combines all learned JavaScript skills to build a polished, interactive web app, such as a task manager or dashboard, and deploy it. This lesson guides you through planning, coding, debugging, and deploying a project using ES6 modules, async APIs, and a build pipeline. You’ll learn to use Git for version control, deploy to platforms like GitHub Pages or Vercel, and test the final app for functionality and performance.",
        "examples": [
          "<div id='app'></div><script type='module'>import { fetchData } from './api.js'; async function init() { const data = await fetchData(); document.getElementById('app').innerHTML = `<p>${data}</p>`; } init();</script>",
          "Deploy: npm run build && git add . && git commit -m 'Capstone deploy' && git push"
        ],
        "realWorldApplication": "Capstone projects simulate real-world apps like task trackers or data dashboards, showcasing development skills.",
        "expertInsights": "Plan features incrementally and test thoroughly. Use source maps for debugging and optimize assets for deployment.",
        "commonMistakes": [
          "Deploying without testing, causing broken functionality.",
          "Not using modules, leading to disorganized code."
        ],
        "exercises": [
          {
            "title": "Build and Deploy Capstone",
            "prompt": "Create a task manager app with add/delete tasks and deploy it to GitHub Pages.",
            "difficulty": "hard",
            "hints": [
              "Use ES6 modules and async/await",
              "Test in DevTools before deploying"
            ],
            "solution": "tasks.js: export const addTask = (task) => `<li>${task}<button onclick=\"this.parentElement.remove()\">Delete</button></li>`;\nmain.js: import { addTask } from './tasks.js'; document.getElementById('add').addEventListener('click', () => { let input = document.getElementById('input'); if (input.value) document.getElementById('tasks').innerHTML += addTask(input.value); });\nHTML: <ul id='tasks'></ul><input id='input'><button id='add'>Add</button><script type='module' src='main.js'></script>\nGit: git add ., git commit -m 'Capstone', git push, enable GitHub Pages"
          }
        ],
        "quiz": [
          {
            "question": "What ensures clean code in a capstone project?",
            "options": [
              "Modules",
              "Inline scripts",
              "Global variables",
              "No debugging"
            ],
            "correctOption": [0]
          },
          {
            "question": "Which platform supports static site deployment?",
            "options": ["MySQL", "Vercel", "MongoDB", "Redis"],
            "correctOption": [1]
          }
        ],
        "estimatedTime": 60,
        "resources": [
          {
            "title": "GitHub Pages Documentation",
            "url": "https://docs.github.com/en/pages",
            "type": "doc"
          },
          {
            "title": "Vercel — Deploying Static Sites",
            "url": "https://vercel.com/docs/platform/deployments",
            "type": "doc"
          }
        ],
        "createdAt": "2025-09-16T00:00:00.000Z"
      }
    ],
    "meta": {
      "generatedAt": "2025-09-16T00:00:00.000Z",
      "version": "1.0"
    }
  }
]
